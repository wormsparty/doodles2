{"version":3,"sources":["common/canvas2d.ts","rogue/const.ts","rogue/map_logic.ts","common/engine.ts","rogue/translations.ts","rogue/target.ts","rogue/map_content.ts","rogue/labyrinth.ts","rogue/Rogue.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Canvas2D","canvas","referenceWidth","referenceHeight","fontSize","fontFamily","tilesize","ctx","font","windowWidth","windowHeight","marginLeft","marginRight","marginTop","marginBottom","scaleFactor","this","getContext","imageSmoothingEnabled","tileset","pos","i","j","sx","sy","cutLeft","cutRight","cutTop","cutBottom","x","y","targetX","targetY","drawImage","image","w","h","color","fillStyle","fillRect","str","save","translate","scale","fillText","restore","ml","mr","mb","mt","ww","wh","DefaultBackgroundColor","DefaultTextColor","globalTile2color","Map","teleportSymbols","itemSymbols","walkableSymbols","obstacleSymbols","pnj2color","item2color","weaponItems","throwableItems","projectile2color","weapon2damage","Pos","otherPos","TeleportPos","id","ObjPos","usage","ProjPos","vx","vy","symbol","power","LevelMap","map","meta","teleportMap","tile2color","texts","background","textColor","targetSpawner","obstacleVisible","obstacleColor","teleports","teleportCount","obstacles","initialItemPositions","start","backgroundColor","undefined","consts","name","visualMap","split","metaMap","length","console","log","chr","indexOf","has","set","get","push","Engine","canvasId","width","height","integerZoom","graphics","mousePosX","mousePosY","document","getElementById","focus","Math","floor","setMousePos","clear","rect","coord","text","yy","get_char_width","img","zoomY","zoom","getZoom","borderx","bordery","ajustementx","ajustementy","resize","pris","take","lancer","lance","item2description","genre","symbol2gameover","retry","new_game_tt","load","exit","Target","pv","pvMax","copy","SpawnerState","targets","tick","json","pv_max","cpy","t","splice","p","target","TargetSpawner","spawnerUpdate","targetUpdate","pv2color","l","stateHolder","heroPos","dp","hits_projectile","hit","projectile2item","currentMapData","equals","gameOverMessage","translations","inner_update","cont","newPos","get_symbol_at","bateau","mission","outside","training","state","spike","n","m","spike2","swordTreasure","leaveRock","spawner","persistedData","coins","swordOnly","rotating","swordTreasure2","hitSword","lastChallenge","treasure","AllMaps","make_first_letter_upper","charAt","toUpperCase","substr","charToCommand","currencyFormatter","Intl","NumberFormat","style","minimumFractionDigits","PersistedMapData","items","projectiles","Array","print","item","positions","pss","proj","hasOwnProperty","parse","PersistedData","weapon","rocks","heroPosition","mapData","currentMapName","data","Labyrinth","pressed","engine","charWidth","currentStatus","isThrowing","isMenuOpen","isMainMenu","menuPosition","mainMenu","gameMenu","lastSave","initialPersistedData","fps","currentMap","parse_all_maps","refresh_menu","key","itemPositions","draw_main_menu","draw_all","update_menu","update_on_map","dx","dy","statusSet","description","itemPicked","drop_current_slot_item_at","do_teleport","walkablePos","aimPos","ret","try_teleport","change_map","try_hit_target","evt","update_current_status","futurePos","allowedWalkingSymbols","mapName","resetTargets","reset","teleportsForChar","teleportsOfOtherMap","newMapName","newMap","tp","newX","newY","dmg","get_weapon_damage","update","newprojx","newprojy","canTeleport","where","update_targets","currentMenu","newP","get_future_position","try_enter_or_exit","save_to_memory","try_pick_or_drop_item","move_projectiles","move_targets_or_die","collides_with_obstacle","move_hero","mapChanged","load_last_save","val","to_screen_coord","get_string_from","draw_character","projectilePosition","foundItem","money","format","txt","enabled","draw_map","draw_items","draw_hero","draw_projectiles","draw_targets","draw_obstacles","draw_overlay","draw_message","draw_menu","draw","resetPosition","get_from_storage","clear_and_start_tt","load_save","save_to_storage","load_from_storage","open_main_menu","saveData","JSON","stringify","window","localStorage","setItem","getItem","newSave","Rogue","props","labyrinth","doUpdate","do_update","onResize","innerWidth","innerHeight","onKeydown","event","body","overflow","addEventListener","FontFaceObserver","then","React","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b2b2a7d.chunk.js","sourcesContent":["import {Tileset} from '../map/tileset';\r\nimport {Pos} from \"../rogue/map_logic\";\r\n\r\nexport class Canvas2D {\r\n  private readonly ctx: CanvasRenderingContext2D;\r\n  private readonly referenceWidth: number;\r\n  private readonly referenceHeight: number;\r\n  private readonly fontSize: number;\r\n  private readonly font: string;\r\n  private readonly fontFamily: string;\r\n  private windowWidth: number;\r\n  private windowHeight: number;\r\n  public marginLeft: number;\r\n  public marginRight: number;\r\n  public marginTop: number;\r\n  public marginBottom: number;\r\n  public scaleFactor: number;\r\n  public tilesize: number;\r\n\r\n  constructor(canvas: HTMLCanvasElement, referenceWidth: number, referenceHeight: number, fontSize: number, fontFamily: string, tilesize: number) {\r\n    this.ctx = canvas.getContext('2d')!;\r\n    this.scaleFactor = 1;\r\n    this.marginLeft = 0;\r\n    this.marginRight = 0;\r\n    this.marginTop = 0;\r\n    this.marginBottom = 0;\r\n    this.windowWidth = 0;\r\n    this.windowHeight = 0;\r\n    this.referenceWidth = referenceWidth;\r\n    this.referenceHeight = referenceHeight;\r\n    this.fontSize = fontSize;\r\n    this.fontFamily = fontFamily;\r\n    this.font = fontSize + 'px ' + fontFamily;\r\n    this.tilesize = tilesize;\r\n  }\r\n  resize(scaleFactor: number, marginLeft: number, marginRight: number, marginTop: number, marginBottom: number, windowWidth: number, windowHeight: number) {\r\n    this.scaleFactor = scaleFactor;\r\n    this.marginLeft = marginLeft;\r\n    this.marginRight = marginRight;\r\n    this.marginTop = marginTop;\r\n    this.marginBottom = marginBottom;\r\n    this.windowWidth = windowWidth;\r\n    this.windowHeight = windowHeight;\r\n\r\n    // This needs to be done at each resizing!\r\n    this.ctx.imageSmoothingEnabled = false;\r\n  }\r\n  img(tileset: Tileset, pos: Pos, i: number, j: number) {\r\n    const sx = this.tilesize * i;\r\n    const sy = this.tilesize * j;\r\n\r\n    let cutLeft = 0;\r\n    let cutRight = 0;\r\n    let cutTop = 0;\r\n    let cutBottom = 0;\r\n\r\n    if (pos.x < 0) {\r\n      cutLeft = -pos.x;\r\n    }\r\n\r\n    if (pos.y < 0) {\r\n      cutTop = -pos.y;\r\n    }\r\n\r\n    if (pos.x + this.tilesize > this.referenceWidth) {\r\n      cutRight = pos.x + this.tilesize - this.referenceWidth;\r\n    }\r\n\r\n    if (pos.y + this.tilesize > this.referenceHeight) {\r\n      cutBottom = pos.y + this.tilesize - this.referenceHeight;\r\n    }\r\n\r\n    if (cutLeft < this.tilesize\r\n      && cutRight < this.tilesize\r\n      && cutTop < this.tilesize\r\n      && cutBottom < this.tilesize) {\r\n      const targetX = (pos.x + cutLeft) * this.scaleFactor + this.marginLeft;\r\n      const targetY = (pos.y + cutTop) * this.scaleFactor + this.marginTop;\r\n\r\n      /*console.log('s = ' + sx + ', ' + sy);\r\n      console.log('w = ' + w + ', h = ' + h);\r\n      console.log('cut = ' + cutLeft + ', ' + cutRight + ', ' + cutTop + ', ' + cutBottom);\r\n      console.log('target = ' + targetX + ',' + targetY);*/\r\n\r\n      this.ctx.drawImage(\r\n        tileset.image,\r\n        sx + cutLeft,\r\n        sy + cutTop,\r\n        this.tilesize - cutLeft - cutRight,\r\n        this.tilesize - cutTop - cutBottom,\r\n        targetX,\r\n        targetY,\r\n        (this.tilesize - cutLeft - cutRight) * this.scaleFactor,\r\n        (this.tilesize - cutTop - cutBottom) * this.scaleFactor);\r\n    }\r\n  }\r\n  rect(pos: Pos, w: number, h: number, color: string) {\r\n    this.ctx.fillStyle = color;\r\n\r\n    let x = pos.x;\r\n    let y = pos.y;\r\n\r\n    if (x < 0) {\r\n      w += x;\r\n      x = 0;\r\n    }\r\n\r\n    if (y < 0) {\r\n      h += y;\r\n      y = 0;\r\n    }\r\n\r\n    if (x >= this.referenceWidth) {\r\n      w -= x - this.referenceWidth;\r\n      x = this.referenceWidth - 1;\r\n    }\r\n\r\n    if (y >= this.referenceHeight) {\r\n      h -= y - this.referenceHeight;\r\n      y = this.referenceHeight - 1;\r\n    }\r\n\r\n    if (w <= 0 || h <= 0) {\r\n      return;\r\n    }\r\n\r\n    this.ctx.fillRect(\r\n    this.marginLeft + x * this.scaleFactor,\r\n    this.marginTop + y * this.scaleFactor,\r\n      w * this.scaleFactor,\r\n      h * this.scaleFactor);\r\n  }\r\n  text(str: string, pos: Pos, color: string) {\r\n    this.ctx.fillStyle = color;\r\n    this.ctx.font = this.font;\r\n\r\n    // TODO: Don't draw text outside\r\n    const x = pos.x;\r\n    const y = pos.y + this.fontSize - 3;\r\n\r\n    this.ctx.save();\r\n    this.ctx.translate(this.marginLeft, this.marginTop);\r\n    this.ctx.scale(this.scaleFactor, this.scaleFactor);\r\n\r\n    this.ctx.fillText(str, x, y);\r\n    this.ctx.restore();\r\n  }\r\n  clear(color: string) {\r\n    this.ctx.fillStyle = 'rgba(5, 5, 5, 1)';\r\n    // handle.ctx.fillRect(0, 0, handle.windowWidth, handle.windowHeight);\r\n\r\n    const ml = this.marginLeft;\r\n    const mr = this.marginRight;\r\n    const mb = this.marginBottom;\r\n    const mt = this.marginTop;\r\n    const ww = this.windowWidth;\r\n    const wh = this.windowHeight;\r\n\r\n    // Left band\r\n    // this.ctx.fillStyle = 'rgba(255, 0, 0, 1)';\r\n    this.ctx.fillRect(0, 0, ml, wh);\r\n    // Top band\r\n    // this.ctx.fillStyle = 'rgba(255, 255, 0, 1)';\r\n    this.ctx.fillRect(ml, 0, ww - mr - ml, mt);\r\n    // Right band\r\n    // this.ctx.fillStyle = 'rgba(255, 0, 255, 1)';\r\n    this.ctx.fillRect(ww - mr, 0, mr, wh);\r\n    // Bottom band\r\n    // this.ctx.fillStyle = 'rgba(0, 255, 255, 1)';\r\n    this.ctx.fillRect(ml, wh - mb, ww - mr - ml, mb);\r\n\r\n    this.ctx.fillStyle = color;\r\n    this.ctx.fillRect(ml, mt, ww - ml - mr, wh - mb - mt);\r\n  }\r\n  get_char_width() {\r\n    return 8;\r\n  }\r\n}\r\n","export const charPerLine = 56;\r\nexport const mapLines = 22;\r\nexport const headerSize = 3;\r\n\r\nexport const DefaultBackgroundColor = '#000000';\r\nexport const DefaultTextColor =  '#FFFF00';\r\nexport const White = '#FFFFFF';\r\nexport const OverlayNormal =  '#555555';\r\nexport const OverlayHighlight =  '#FFFFFF';\r\nexport const OverlaySelected =  '#FF00FF';\r\n\r\n/*\r\n * Map\r\n */\r\nexport const globalTile2color = new Map<string, string>([\r\n  ['#', '#646464'],\r\n  ['.', '#646464'],\r\n  ['~', '#C8C8C8'],\r\n]);\r\n\r\nexport const teleportSymbols: Array<string> = [ '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '>', '<' ];\r\nexport const itemSymbols: Array<string> = [ '*', '$', '/', '\\\\' ];\r\nexport const walkableSymbols: Array<string> = [ '.', '<', '>' ];\r\nexport const obstacleSymbols: Array<string> = [ 'x' ];\r\n\r\n/*\r\n * PNJ\r\n */\r\nexport const pnj2color = new Map<string, string>([\r\n  ['t', '#6699FF'],\r\n  ['@', '#FF0000'],\r\n]);\r\n\r\n/*\r\n * Items\r\n */\r\nexport const item2color = new Map<string, string>([\r\n  ['$', '#FFFF00'],\r\n  ['=', '#FF0000'],\r\n  ['*', '#dd99FF'],\r\n  ['%', '#119900'],\r\n  ['/', '#999999'],\r\n  ['\\\\', '#FFFFFF'],\r\n]);\r\n\r\nexport const weaponItems = [ '/', '\\\\' ];\r\nexport const throwableItems = [ '*' ];\r\n\r\nexport const projectile2color = new Map<string, string>([\r\n  ['*', '#999999'],\r\n  ['&', '#FF0000'],\r\n]);\r\n\r\nexport const weapon2damage = new Map<string, number>([\r\n  ['/', 1],\r\n  ['\\\\', 3],\r\n  ['', 0],\r\n]);\r\n","import * as consts from './const';\r\nimport {TargetSpawner} from './target';\r\nimport {Labyrinth} from \"./labyrinth\";\r\n\r\nexport class Pos {\r\n  x: number;\r\n  y: number;\r\n\r\n  constructor(x: number, y: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  equals(otherPos: Pos): boolean {\r\n    return this.x === otherPos.x && this.y === otherPos.y;\r\n  }\r\n\r\n  copy(): Pos {\r\n    return new Pos(this.x, this.y);\r\n  }\r\n}\r\n\r\nexport class TeleportPos extends Pos {\r\n  id: number;\r\n\r\n  constructor(x: number, y: number, id: number) {\r\n    super(x, y);\r\n    this.id = id;\r\n  }\r\n}\r\n\r\nexport class ObjPos extends Pos {\r\n  usage: number;\r\n\r\n  constructor(x: number, y: number, usage: number) {\r\n    super(x, y);\r\n    this.usage = usage;\r\n  }\r\n\r\n  copy(): ObjPos {\r\n    return new ObjPos(this.x, this.y, this.usage);\r\n  }\r\n}\r\n\r\nexport class ProjPos extends Pos {\r\n  vx: number;\r\n  vy: number;\r\n  symbol: string;\r\n  power: number;\r\n\r\n  constructor(x: number, y: number, vx: number, vy: number, symbol: string, power: number) {\r\n    super(x, y);\r\n    this.vx = vx;\r\n    this.vy = vy;\r\n    this.symbol = symbol;\r\n    this.power = power;\r\n  }\r\n\r\n  copy(): ProjPos {\r\n    return new ProjPos(this.x, this.y, this.vx, this.vy, this.symbol, this.power);\r\n  }\r\n}\r\n\r\nexport class LevelMap {\r\n  map: string;\r\n  meta: string;\r\n  teleportMap: Map<string, string>;\r\n  tile2color: Map<string, string>;\r\n  texts: Map<string, Map<string, Pos>>;\r\n  teleports: Map<string, Array<TeleportPos>>;\r\n  teleportCount: Map<string, number>;\r\n  obstacles: Map<string, Array<Pos>>;\r\n  obstacleColor: string;\r\n  initialItemPositions: Map<string, Array<ObjPos>>;\r\n  start: Pos;\r\n  backgroundColor: string;\r\n  textColor: string;\r\n  targetSpawner: TargetSpawner | null;\r\n  obstacleVisible: ((laby: Labyrinth, str: string) => boolean) = () => false;\r\n\r\n  constructor(map: string, meta: string, teleportMap: Map<string, string>,\r\n              tile2color: Map<string, string>, texts: Map<string, Map<string, Pos>>, background: string,\r\n              textColor: string, targetSpawner: TargetSpawner | null,\r\n              obstacleVisible: ((laby: Labyrinth, str: string) => boolean) | null, obstacleColor: string) {\r\n    this.map = map;\r\n    this.meta = meta;\r\n    this.teleportMap = teleportMap;\r\n    this.tile2color = tile2color;\r\n    this.texts = texts;\r\n    this.teleports = new Map<string, Array<TeleportPos>>();\r\n    this.teleportCount = new Map<string, number>();\r\n    this.initialItemPositions = new Map<string, Array<ObjPos>>();\r\n    this.start = new Pos(0, 0);\r\n    this.targetSpawner = targetSpawner;\r\n    this.obstacles = new Map<string, Array<Pos>>();\r\n\r\n    if (obstacleVisible != null) {\r\n      this.obstacleVisible = obstacleVisible;\r\n    }\r\n\r\n    if (background !== undefined) {\r\n      this.backgroundColor = background;\r\n    } else {\r\n      this.backgroundColor = consts.DefaultBackgroundColor;\r\n    }\r\n\r\n    if (textColor !== '') {\r\n      this.textColor = textColor;\r\n    } else {\r\n      this.textColor = consts.DefaultTextColor;\r\n    }\r\n\r\n    if (obstacleColor !== undefined) {\r\n      this.obstacleColor = obstacleColor;\r\n    } else {\r\n      this.obstacleColor = consts.DefaultTextColor;\r\n    }\r\n  }\r\n\r\n  parse(name: string): void {\r\n    const visualMap: Array<string> = this.map.split('\\n');\r\n    const metaMap: Array<string> = this.meta.split('\\n');\r\n\r\n    if (visualMap.length !== consts.mapLines) {\r\n      console.log('La carte V ' + name + ' n\\'a pas exactement ' + consts.mapLines + ' lignes (' + visualMap.length + ')');\r\n    }\r\n\r\n    if (metaMap.length !== consts.mapLines) {\r\n      console.log('La carte M ' + name + ' n\\'a pas exactement ' + consts.mapLines + ' lignes (' + metaMap.length + ')');\r\n    }\r\n\r\n    for (let i = 0; i < consts.mapLines; i++) {\r\n      if (visualMap[i].length !== consts.charPerLine) {\r\n        console.log('V ' + name + ' l.' + i + ' n\\'a pas exactement ' + consts.charPerLine + ' chars (' + visualMap[i].length + ')');\r\n      }\r\n\r\n      if (metaMap[i].length !== consts.charPerLine) {\r\n        console.log('M ' + name + ' l.' + i + ' n\\'a pas exactement ' + consts.charPerLine + ' chars (' + metaMap[i].length + ')');\r\n      }\r\n    }\r\n\r\n    for (let y = 0; y < consts.mapLines; y++) {\r\n      for (let x = 0; x < consts.charPerLine; x++) {\r\n        const chr = metaMap[y][x];\r\n\r\n        if (chr === '#') {\r\n          if (visualMap[y][x] !== '#') {\r\n            console.log('Les murs ne marchent pas en (' + x + ', ' + y + '), carte = ' + name);\r\n          }\r\n        } else if (consts.teleportSymbols.indexOf(chr) > -1) {\r\n          if (!this.teleports.has(chr)) {\r\n            this.teleports.set(chr, []);\r\n            this.teleportCount.set(chr, 0);\r\n          }\r\n\r\n          this.teleports.get(chr)!.push(new TeleportPos(x, y, this.teleportCount.get(chr)!));\r\n          this.teleportCount.set(chr, this.teleportCount.get(chr)! + 1);\r\n        } else if (consts.itemSymbols.indexOf(chr) > -1) {\r\n          if (!this.initialItemPositions.has(chr)) {\r\n            this.initialItemPositions.set(chr, []);\r\n          }\r\n\r\n          this.initialItemPositions.get(chr)!.push(new ObjPos(x, y, 1));\r\n        } else if (consts.obstacleSymbols.indexOf(chr) > -1) {\r\n          if (!this.obstacles.has(chr)) {\r\n            this.obstacles.set(chr, []);\r\n          }\r\n\r\n          this.obstacles.get(chr)!.push(new Pos(x, y));\r\n        } else if (chr !== ' ' && chr !== undefined) {\r\n          if (chr === '@') {\r\n            this.start = new Pos(x, y);\r\n          } else {\r\n            console.log('Unknown char: ' + chr);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  get_symbol_at(x: number, y: number): string {\r\n    return this.map[y * (consts.charPerLine + 1) + x];\r\n  }\r\n}\r\n","import { Canvas2D } from './canvas2d';\r\nimport {Tileset} from '../map/tileset';\r\nimport {Pos} from \"../rogue/map_logic\";\r\n// import { WebAudio } from './webaudio';\r\n\r\nexport class Engine {\r\n  private readonly canvas: HTMLCanvasElement | null;\r\n  private readonly graphics: Canvas2D;\r\n  // private readonly audio: WebAudio;\r\n\r\n  readonly referenceWidth: number = 0;\r\n  readonly referenceHeight: number = 0;\r\n\r\n  public integerZoom: boolean = false;\r\n\r\n  public mousePosX: number = 0;\r\n  public mousePosY: number = 0;\r\n\r\n  setMousePos(x: number, y: number) {\r\n    this.mousePosX = Math.floor((x - this.graphics.marginLeft) / this.graphics.scaleFactor);\r\n    this.mousePosY = Math.floor((y - this.graphics.marginTop) / this.graphics.scaleFactor);\r\n  }\r\n  click(x: number, y: number) {\r\n    this.setMousePos(x, y);\r\n  }\r\n  clear(color: string) {\r\n    this.graphics.clear(color);\r\n  }\r\n  rect(pos: Pos, w: number, h: number, color: string) {\r\n    this.graphics.rect(pos, w, h, color);\r\n  }\r\n  text(str: string, coord: Pos, color: string) {\r\n    this.graphics.text(str, coord, color);\r\n  }\r\n  textCentered(text: string, yy: number, color: string) {\r\n    const coord = new Pos(this.referenceWidth / 2 - this.get_char_width() * text.length / 2, yy);\r\n    this.text(text, coord, color);\r\n  }\r\n  get_char_width() {\r\n    return this.graphics.get_char_width();\r\n  }\r\n  img(tileset: Tileset, pos: Pos, x: number, y: number) {\r\n    this.graphics.img(tileset, pos, x, y);\r\n  }\r\n  /*load_sound(file, onload, onfailure) {\r\n    this.audio.load(file, onload, onfailure);\r\n  }\r\n  play(filename) {\r\n    this.audio.play(filename);\r\n  }*/\r\n  getZoom(width: number, height: number, referenceWidth: number, referenceHeight: number) {\r\n    const zoomX = width / referenceWidth;\r\n    const zoomY = height / referenceHeight;\r\n    let zoom = zoomX;\r\n\r\n    if (zoomY < zoom) {\r\n      zoom = zoomY;\r\n    }\r\n\r\n    if (this.integerZoom) {\r\n      zoom = Math.floor(zoom);\r\n\r\n      if (zoom < 1) {\r\n        zoom = 1;\r\n      }\r\n\r\n      return zoom;\r\n    } else {\r\n      return zoom;\r\n    }\r\n  }\r\n  resize(width: number, height: number) {\r\n    const zoom = this.getZoom(width, height, this.referenceWidth, this.referenceHeight);\r\n\r\n    const borderx = Math.floor((width - this.referenceWidth * zoom) / 2);\r\n    const bordery = Math.floor((height - this.referenceHeight * zoom) / 2);\r\n    const ajustementx = Math.floor(width - this.referenceWidth * zoom - borderx * 2);\r\n    const ajustementy = Math.floor(height - this.referenceHeight * zoom - bordery * 2);\r\n\r\n    if (this.canvas != null) {\r\n      this.canvas.width = width;\r\n      this.canvas.height = height;\r\n    }\r\n\r\n    this.graphics.resize(zoom, borderx + ajustementx, borderx, bordery + ajustementy, bordery, width, height);\r\n  }\r\n  constructor(canvasId: string, width: number, height: number, fontSize: number, fontFamily: string, integerZoom: boolean, tilesize: number) {\r\n    this.canvas = document.getElementById(canvasId) as HTMLCanvasElement;\r\n    this.graphics = new Canvas2D(this.canvas, width, height, fontSize, fontFamily, tilesize);\r\n    /*this.audio = new WebAudio();\r\n\r\n    if (!this.audio) {\r\n      console.log('Failed to initialize WebAudio.');\r\n      return;\r\n    }*/\r\n\r\n    if (!this.graphics) {\r\n      console.log('Failed to load Canvas2D.');\r\n      return;\r\n    }\r\n\r\n    this.referenceWidth = width;\r\n    this.referenceHeight = height;\r\n    this.integerZoom = integerZoom;\r\n\r\n    if (this.canvas != null) {\r\n      this.canvas.focus();\r\n    }\r\n  }\r\n}\r\n","export const pris = new Map<string, Map<string, string>>([\r\n  ['en', new Map<string, string>([ ['M', ' taken'] ]) ],\r\n  ['fr', new Map<string, string>([\r\n    ['M', ' pris'],\r\n    ['F', ' prise'],\r\n  ])],\r\n]);\r\n\r\nexport const take = new Map<string, string>([\r\n  ['en', '[5] Take '],\r\n  ['fr', '[5] Prendre '],\r\n]);\r\n\r\nexport const lancer = new Map<string, string>([\r\n  ['en', 'Throw'],\r\n  ['fr', 'Lancer'],\r\n]);\r\n\r\nexport const lance = new Map<string, Map<string, string>>([\r\n  ['en', new Map<string, string>([ ['M', ' thrown']])],\r\n  ['fr', new Map<string, string>([\r\n    ['M', ' lancé'],\r\n    ['F', ' lancée'],\r\n  ])],\r\n]);\r\n\r\nexport const item2description = new Map<string, Map<string, any>>([\r\n  ['en', new Map<string, any>([\r\n    ['*', { text: 'rock', genre: 'M' }],\r\n    ['/', { text: 'sword', genre: 'M' }],\r\n    ['\\\\', { text: 'sword lvl.2', genre: 'M' }],\r\n    ['=', { text: 'fire spell', genre: 'M' }],\r\n    ['', { text: 'nothing', genre: 'M' }]\r\n  ])],\r\n  ['fr', new Map<string, any>([\r\n    ['*', { text: 'caillou', genre: 'M' }],\r\n    ['/', { text: 'épée', genre: 'F' }],\r\n    ['\\\\', { text: 'épée lvl.2', genre: 'F' }],\r\n    ['=', { text: 'sort de feu', genre: 'M' }],\r\n    ['' , { text: 'rien', genre: 'M' }],\r\n  ])],\r\n]);\r\n\r\nexport const symbol2gameover = new Map<string, Map<string, string>>([\r\n  ['en', new Map<string, string>([\r\n    ['#', 'Crushed!'],\r\n    ['~', 'Drown!'],\r\n    ['v', 'Impaled!'],\r\n    ['>', 'Impaled!'],\r\n    ['<', 'Impaled!'],\r\n    ['^', 'Impaled!'],\r\n  ])],\r\n  ['fr', new Map<string, string>([\r\n    ['#', 'Écrasé!'],\r\n    ['~', 'Noyé!'],\r\n    ['v', 'Empalé!'],\r\n    ['<', 'Empalé!'],\r\n    ['>', 'Empalé!'],\r\n    ['^', 'Empalé!'],\r\n  ])]\r\n]);\r\n\r\nexport const retry = new Map<string, string>([\r\n  ['en', 'Space to retry'],\r\n  ['fr', 'Espace pour réessayer'],\r\n]);\r\n\r\nexport const new_game_tt = new Map<string, string>([\r\n  ['en', 'New game'],\r\n  ['fr', 'Nouvelle partie'],\r\n]);\r\n\r\nexport const load = new Map<string, string>([\r\n  ['en', 'Load'],\r\n  ['fr', 'Charger'],\r\n]);\r\n\r\nexport const save = new Map<string, string>([\r\n  ['en', 'Save'],\r\n  ['fr', 'Sauver'],\r\n]);\r\n\r\nexport const exit = new Map<string, string>([\r\n  ['en', 'Exit'],\r\n  ['fr', 'Quitter'],\r\n]);\r\n","import {Pos} from './map_logic';\r\nimport {Labyrinth} from './labyrinth';\r\nimport * as consts from './const';\r\nimport * as translations from './translations';\r\n\r\nexport class Target {\r\n  pos: Pos;\r\n  symbol: string;\r\n  pv: number;\r\n  pvMax: number;\r\n\r\n  constructor(pos: Pos, symbol: string, pv: number, pvMax: number) {\r\n    this.pos = pos;\r\n    this.symbol = symbol;\r\n    this.pv = pv;\r\n    this.pvMax = pvMax;\r\n  }\r\n\r\n  copy(): Target {\r\n    return new Target(this.pos.copy(), this.symbol, this.pv, this.pvMax);\r\n  }\r\n}\r\n\r\nexport class SpawnerState {\r\n  readonly targets: Array<Target>;\r\n  tick: number;\r\n\r\n  constructor(targets: Array<Target>, tick: number) {\r\n    this.targets = targets;\r\n    this.tick = tick;\r\n  }\r\n\r\n  static parse(json: any): SpawnerState | null {\r\n    if (json === null) {\r\n      return null;\r\n    }\r\n\r\n    const p = new SpawnerState([], json.tick);\r\n\r\n    for (const target of json.targets) {\r\n      p.targets.push(new Target(new Pos(target.pos.x, target.pos.y), target.symbol, target.pv, target.pvMax));\r\n    }\r\n\r\n    return p;\r\n  }\r\n  print(): {} {\r\n    const json: any = {\r\n      targets: [],\r\n      tick: this.tick,\r\n    };\r\n\r\n    for (let i = 0; i < this.targets.length; i++) {\r\n      json.targets[i] = {\r\n        pos: {\r\n          x: this.targets[i].pos.x,\r\n          y: this.targets[i].pos.y,\r\n        },\r\n        symbol: this.targets[i].symbol,\r\n        pv: this.targets[i].pv,\r\n        pv_max: this.targets[i].pvMax,\r\n      };\r\n    }\r\n\r\n    return json;\r\n  }\r\n  copy(): SpawnerState {\r\n    const cpy = new SpawnerState([], this.tick);\r\n\r\n    for (const t of this.targets) {\r\n      cpy.targets.push(t.copy());\r\n    }\r\n\r\n    return cpy;\r\n  }\r\n  reset(): void {\r\n    this.tick = 0;\r\n    this.targets.splice(0, this.targets.length);\r\n  }\r\n}\r\n\r\nexport class TargetSpawner {\r\n  private readonly spawnerUpdate: (s: SpawnerState) => void;\r\n  private readonly targetUpdate: (str: string) => Pos;\r\n  pv2color: (nb: number) => string;\r\n\r\n  constructor(spawnerUpdate: (s: SpawnerState) => void, targetUpdate: (str: string) => Pos, pv2color: (nb: number) => string) {\r\n    this.spawnerUpdate = spawnerUpdate;\r\n    this.targetUpdate = targetUpdate;\r\n    this.pv2color = pv2color;\r\n  }\r\n\r\n  inner_update(l: Labyrinth, i: number, target: Target, stateHolder: SpawnerState, heroPos: Pos, dp: Pos): [boolean, Pos | null] {\r\n    const [hit, power] = l.hits_projectile(target.pos);\r\n    const lang = 'fr';\r\n\r\n    if (hit !== -1) {\r\n      l.projectile2item(l.currentMapData, target.pos, hit);\r\n      target.pv -= power;\r\n\r\n      if (target.pv <= 0) {\r\n        stateHolder.targets.splice(i, 1);\r\n        return [ false, null ];\r\n      }\r\n    }\r\n\r\n    if (target.pos.equals(heroPos)) {\r\n      if (target.symbol === 'O') {\r\n        // TODO: Check for teleports here??\r\n        heroPos.x += dp.x;\r\n        heroPos.y += dp.y;\r\n      } else {\r\n        l.gameOverMessage = translations.symbol2gameover.get(lang)!.get(target.symbol)!;\r\n        return [ true, heroPos ];\r\n      }\r\n    }\r\n\r\n    return [ true, null ];\r\n  }\r\n  update(l: Labyrinth, stateHolder: SpawnerState, heroPos: Pos): Pos {\r\n    this.spawnerUpdate(stateHolder);\r\n\r\n    for (let i = 0; i < stateHolder.targets.length;) {\r\n      const target = stateHolder.targets[i];\r\n      const dp = this.targetUpdate(target.symbol);\r\n\r\n      // We need to make the test twice (see below).\r\n      // This case is if the projectile hits directly\r\n      // The case below is if the two are separated by 1:\r\n      // the target gets at the same position as the projectile\r\n      // -> It needs to count as a hit too\r\n      let [cont, newPos] = this.inner_update(l, i, target, stateHolder, heroPos, dp);\r\n\r\n      if (!cont) {\r\n        continue;\r\n      }\r\n\r\n      if (newPos !== null) {\r\n        return newPos;\r\n      }\r\n\r\n      target.pos.x += dp.x;\r\n      target.pos.y += dp.y;\r\n\r\n      if (target.pos.y >= consts.mapLines || target.pos.y < 0\r\n        || target.pos.x < 0 || target.pos.x >= consts.charPerLine\r\n        || l.get_symbol_at(target.pos) === '#') {\r\n        stateHolder.targets.splice(i, 1);\r\n        continue;\r\n      }\r\n\r\n      [cont, newPos] = this.inner_update(l, i, target, stateHolder, heroPos, dp);\r\n\r\n      if (!cont) {\r\n        continue;\r\n      }\r\n\r\n      if (newPos !== null) {\r\n        return newPos;\r\n      }\r\n\r\n      i++;\r\n    }\r\n\r\n    return heroPos;\r\n  }\r\n}\r\n","import {LevelMap, Pos} from './map_logic';\r\nimport {Labyrinth} from './labyrinth';\r\nimport {SpawnerState, Target, TargetSpawner} from './target';\r\n\r\nconst bateau = new LevelMap('' +\r\n  '                                           ~~~~~~~~~~~~~\\n' +\r\n  '                                                ~~~~~~~~\\n' +\r\n  '                                                 ~~~~~~~\\n' +\r\n  '                                              ~~~~~~~~~~\\n' +\r\n  '                                    ##        ~~~~~~~~~~\\n' +\r\n  '                                 *********        ~~~~~~\\n' +\r\n  '                               ***********          ~~~~\\n' +\r\n  '                             *************           ~~~\\n' +\r\n  '                             **************      ~~~~~~~\\n' +\r\n  '                             **************     ~~~~~~~~\\n' +\r\n  '                             **************  ~~~~~~~~~~~\\n' +\r\n  '                              ************~~~~~~~~~~~~~~\\n' +\r\n  '                         ~~~~~~~~********~~~~~~~~~~~~~~~\\n' +\r\n  '                    ~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~\\n' +\r\n  '               ~~~~~~~############################~~~###\\n' +\r\n  '            ~~~~~~~~~~~#................................\\n' +\r\n  '          ~~~~~~~~~~~~~~##.......................#~~~###\\n' +\r\n  '           ~~~~~~~~~~~~~~~#######################~~~~~~~\\n' +\r\n  '               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\r\n  '                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\r\n  '                                 ~~~~~~~~~~~~~~~~~~~~~~~\\n' +\r\n  '                                          ~~~~~~~~~~~~~~',\r\n  '' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                    ##                  \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                    ##                  \\n' +\r\n  '                      ############################   ###\\n' +\r\n  '                       #     @                         1\\n' +\r\n  '                        ##                       #   ###\\n' +\r\n  '                          #######################       \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        ',\r\n  new Map([\r\n    ['1', 'mission'],\r\n  ]),\r\n  new Map([\r\n    ['~', '#0000FF'],\r\n    ['.', '#FF7700'],\r\n    ['#', '#AA3300'],\r\n    ['>', '#FFFFFF'],\r\n  ]),\r\n  new Map<string, Map<string, Pos>>([\r\n    ['en', new Map<string, Pos>([\r\n      ['Thirsty for adventure,', new Pos(4, 3)],\r\n      ['you sailed to new lands.', new Pos(4, 4)],\r\n      ['After quiet and storm,', new Pos(4, 6)],\r\n      ['filled with hope, you', new Pos(4, 7)],\r\n      ['finally land.', new Pos(4, 8)],\r\n    ])],\r\n    ['fr', new Map<string, Pos>([\r\n      ['En soif de nouvelles aventures,', new Pos(4, 3)],\r\n      ['vous avez pris le large.', new Pos(4, 4)],\r\n      ['Après calme et tempêtes,', new Pos(4, 6)],\r\n      ['rempli d\\'espoirs, vous', new Pos(4, 7)],\r\n      ['accostez sur une', new Pos(4, 8)],\r\n      ['terre nouvelle.', new Pos(4, 9)],\r\n    ])],\r\n  ]),\r\n  '#000005',\r\n  '',\r\n  null,\r\n  null,\r\n  '');\r\n\r\nconst mission = new LevelMap('' +\r\n  '                                                        \\n' +\r\n  '         ***************************************        \\n' +\r\n  '        *                                       *       \\n' +\r\n  '       *             ------------                *      \\n' +\r\n  '       *            ------[]------         $     *      \\n' +\r\n  '       *            --------------  $      $     *      \\n' +\r\n  '       *         $  --------------  $      $     *      \\n' +\r\n  '   ~~~~*  $   $  $  --------------  $  $   $     *~~~~~ \\n' +\r\n  '  ~~~~~~*                                        *~~~~~~\\n' +\r\n  '~~~~~~~~~***********************     ************~~~~~~~\\n' +\r\n  '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~**  *~~~~~~~~~~~~~~~~~~~\\n' +\r\n  '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~**~~~~~~~~~~~~~~~~~~~~\\n' +\r\n  '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###*####################\\n' +\r\n  '################################...m....................\\n' +\r\n  '........................................................\\n' +\r\n  '################################........................\\n' +\r\n  '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~########################\\n' +\r\n  '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \\n' +\r\n  '    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~        \\n' +\r\n  '           ~~~~~~~~~~~~~~~~~~                           \\n' +\r\n  '               ~~~~~~~~~~~                              \\n' +\r\n  '                                                        ',\r\n  '' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                ### ####################\\n' +\r\n  '################################                       2\\n' +\r\n  '1                                                      2\\n' +\r\n  '################################                       2\\n' +\r\n  '                                ########################\\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        ',\r\n  new Map([\r\n    ['1', 'bateau'],\r\n    ['2', 'outside'],\r\n  ]),\r\n  new Map([\r\n    ['~', '#0000FF'],\r\n    ['.', '#FF7700'],\r\n    ['#', '#AA3300'],\r\n    ['*', '#FFFFFF'],\r\n  ]),\r\n  new Map<string, Map<string, Pos>>(),\r\n  '#000005',\r\n  '',\r\n  null,\r\n    null,\r\n  '',\r\n);\r\n\r\nconst outside = new LevelMap('' +\r\n  '      \"\"\"\"\"\"              #...........#                 \\n' +\r\n  '       \"\"\"\"               #............#     \"\"\"\"\"\"\"    \\n' +\r\n  '                          #.............#      \"\"\"\"\"\"   \\n' +\r\n  '                          #..............#####          \\n' +\r\n  '                         #....................#####     \\n' +\r\n  '                        #..........................#####\\n' +\r\n  '     \"\"\"\"              #................................\\n' +\r\n  '    \"\"\"\"\"\"            #.................................\\n' +\r\n  '     \"\"\"\"           ##..................................\\n' +\r\n  '                 ###....................................\\n' +\r\n  '            #####.....................................##\\n' +\r\n  '       #####........................................##  \\n' +\r\n  '#######...........................................##    \\n' +\r\n  '................................................##      \\n' +\r\n  '...........................................#####        \\n' +\r\n  '....................................#######             \\n' +\r\n  '#######...................##########                    \\n' +\r\n  '       ##.............####                      \"\"      \\n' +\r\n  '         ##........###                         \"\"\"\"     \\n' +\r\n  '           ########                             \"\"      \\n' +\r\n  '                     \"\"\"                                \\n' +\r\n  '                    \"\"\"\"\"                               ',\r\n  '' +\r\n  '                          #11111111111#                 \\n' +\r\n  '                          #            #                \\n' +\r\n  '                          #             #               \\n' +\r\n  '                          #              #####          \\n' +\r\n  '                         #                    #####     \\n' +\r\n  '                        #                          #####\\n' +\r\n  '                       #                               3\\n' +\r\n  '                      #                                3\\n' +\r\n  '                    ##                                 3\\n' +\r\n  '                 ###                                   3\\n' +\r\n  '            #####                                     ##\\n' +\r\n  '       #####                                        ##  \\n' +\r\n  '#######                                           ##    \\n' +\r\n  '2                                               ##      \\n' +\r\n  '2                                          #####        \\n' +\r\n  '2                                   #######             \\n' +\r\n  '#######                   ##########                    \\n' +\r\n  '       ##             ####                              \\n' +\r\n  '         ##        ###                                  \\n' +\r\n  '           ########                                     \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        ',\r\n  new Map([\r\n    [ '1', 'spike' ],\r\n    [ '2', 'mission' ],\r\n    [ '3', 'training' ],\r\n  ]),\r\n  new Map([\r\n    ['$', '#FF00AA'],\r\n    ['#', '#555555'],\r\n    ['.', '#333333'],\r\n    ['\"', '#00FF00'],\r\n    ['^', '#FFFF00'],\r\n    ['>', '#FFFFFF'],\r\n    ['<', '#FFFFFF'],\r\n  ]),\r\n    new Map<string, Map<string, Pos>>(),\r\n  '#050505',\r\n  '',\r\n    null,\r\n    null,\r\n  '',\r\n);\r\n\r\nconst training = new LevelMap('' +\r\n  '                       #~~~~~~~~~~~~~~~~#               \\n' +\r\n  '                       #~~~~~~~~~~~~~~~~#               \\n' +\r\n  '                      #~~~........~~~~~~~#              \\n' +\r\n  '#####               ##~~..............~~~~##            \\n' +\r\n  '.....####        ###........................###         \\n' +\r\n  '.........########..............................###      \\n' +\r\n  '..................................................######\\n' +\r\n  '.....######.............................................\\n' +\r\n  '#####      #####........................................\\n' +\r\n  '                ##......................................\\n' +\r\n  '                  #.....................................\\n' +\r\n  '                   #.................................###\\n' +\r\n  '                   #................................#   \\n' +\r\n  '                  #...............................##    \\n' +\r\n  '                 #~~~~.........................###      \\n' +\r\n  '               ##~~~~~~...............~~~~~####         \\n' +\r\n  '            ###~~~~~~~~~~......~~~~~~~~####             \\n' +\r\n  '          ##~~~~~~~~~~~~~~~~~~~~~~~~~~#                 \\n' +\r\n  '         #~~~~~~~~~~~~~~~~~~~~~~~~~~~#                  \\n' +\r\n  '        #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##                \\n' +\r\n  '       #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##              \\n' +\r\n  '       #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#             ',\r\n  '' +\r\n  '                       #                #               \\n' +\r\n  '                       #                #               \\n' +\r\n  '                      #                  #              \\n' +\r\n  '#####               ##                    ##            \\n' +\r\n  '3    ####        ###                        ###         \\n' +\r\n  '3        ########                              ###      \\n' +\r\n  '3 @                                               ######\\n' +\r\n  '3    ######                                            1\\n' +\r\n  '#####      #####                                       1\\n' +\r\n  '                ##                                     1\\n' +\r\n  '                  #                                    1\\n' +\r\n  '                   #                                 ###\\n' +\r\n  '                   #                                #   \\n' +\r\n  '                  #                               ##    \\n' +\r\n  '                 #                             ###      \\n' +\r\n  '               ##          *               ####         \\n' +\r\n  '            ###                        ####             \\n' +\r\n  '          ##                          #                 \\n' +\r\n  '         #                           #                  \\n' +\r\n  '        #                             ##                \\n' +\r\n  '       #                                ##              \\n' +\r\n  '       #                                  #             ',\r\n  new Map([\r\n    [ '1', 'leaveRock' ],\r\n    [ '3', 'outside' ],\r\n  ]),\r\n  new Map([\r\n    [ '~', '#0000FF'],\r\n  ]),\r\n    new Map<string, Map<string, Pos>>(),\r\n  '#020302',\r\n  '',\r\n  new TargetSpawner((state: SpawnerState): void => {\r\n    state.tick = (state.tick + 1) % 20;\r\n\r\n    if (state.tick >= 16) {\r\n      return;\r\n    }\r\n\r\n    state.targets.push(new Target(new Pos(24 + 16 - state.tick, -1), 'O', 3, 3));\r\n    state.targets.push(new Target(new Pos(24 + 15 - state.tick, -1), 'O', 3, 3));\r\n  }, () => {\r\n    return new Pos(0, 1);\r\n  }, (pv: number): string => {\r\n    if (pv === 3) {\r\n      return '#00FF00';\r\n    } else if (pv === 2) {\r\n      return '#FF9900';\r\n    } else {\r\n      return '#FF0000';\r\n    }\r\n  }),\r\n  null,\r\n  '',\r\n);\r\n\r\nconst spike = new LevelMap('' +\r\n  '                      #.................#               \\n' +\r\n  '                      #.................#               \\n' +\r\n  '                      #.................#               \\n' +\r\n  '                     #...................#              \\n' +\r\n  '                      #..................#              \\n' +\r\n  '     ~~~~~            #.................#               \\n' +\r\n  '   ~~~~~~~~~~~~      #..................#               \\n' +\r\n  '      ~~~~~~         #..................#               \\n' +\r\n  '                     #..................#      ~~~~     \\n' +\r\n  '                     #..................#     ~~~~~~~~  \\n' +\r\n  '                     #..................#       ~~~~~   \\n' +\r\n  '                     #...................#              \\n' +\r\n  '                     #...................#              \\n' +\r\n  '                      #..................#              \\n' +\r\n  '                      #..................#              \\n' +\r\n  '                      #..................#              \\n' +\r\n  '                       #.................#              \\n' +\r\n  '         ~~~~~~        #................#               \\n' +\r\n  '      ~~~~~~~          #...............#                \\n' +\r\n  '         ~~~~~~        #...............#                \\n' +\r\n  '                        #.............#                 \\n' +\r\n  '                         #...........#                  ',\r\n  '' +\r\n  '                      #22222222222222222#               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                     #                   #              \\n' +\r\n  '                      #                  #              \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                     #                  #               \\n' +\r\n  '                     #                  #               \\n' +\r\n  '                     #                  #               \\n' +\r\n  '                     #                  #               \\n' +\r\n  '                     #                  #               \\n' +\r\n  '                     #                   #              \\n' +\r\n  '                     #                   #              \\n' +\r\n  '                      #                  #              \\n' +\r\n  '                      #                  #              \\n' +\r\n  '                      #                  #              \\n' +\r\n  '                       #                 #              \\n' +\r\n  '                       #                #               \\n' +\r\n  '                       #               #                \\n' +\r\n  '                       #      @        #                \\n' +\r\n  '                        #             #                 \\n' +\r\n  '                         #11111111111#                  ',\r\n  new Map([\r\n    [ '1', 'outside' ],\r\n    [ '2', 'spike2' ],\r\n  ]),\r\n  new Map([\r\n    ['#', '#555555'],\r\n    ['~', '#0000FF'],\r\n  ]),\r\n    new Map<string, Map<string, Pos>>(),\r\n  '#050505',\r\n  '',\r\n  new TargetSpawner((state: SpawnerState): void => {\r\n    const m = 34;\r\n    state.tick = (state.tick + 1) % (m - 2);\r\n    let n = state.tick;\r\n\r\n    if (state.tick >= m / 2) {\r\n      n = m - 2 - state.tick;\r\n    }\r\n\r\n    state.targets.push(new Target(new Pos(23 + n, -1), 'v', 1, 1));\r\n  }, (): Pos => {\r\n    return new Pos(0, 1);\r\n  }, (pv: number): string => {\r\n    return '#00FF00';\r\n  }),\r\n  null,\r\n  '',\r\n);\r\n\r\nconst spike2 = new LevelMap('' +\r\n  '                      #.................#               \\n' +\r\n  '                      #.................#               \\n' +\r\n  '                      #.................#               \\n' +\r\n  '                      #.................#               \\n' +\r\n  '                      #.................#               \\n' +\r\n  '     ~~~~~            #.................#               \\n' +\r\n  '   ~~~~~~~~~~~~       #.................#               \\n' +\r\n  '      ~~~~~~          #.................#               \\n' +\r\n  '                      #.................#      ~~~~     \\n' +\r\n  '                      #.................#     ~~~~~~~~  \\n' +\r\n  '                      #.................#       ~~~~~   \\n' +\r\n  '                      #.................#               \\n' +\r\n  '                      #.................#               \\n' +\r\n  '                      #.................#               \\n' +\r\n  '                      #.................#               \\n' +\r\n  '                      #.................#               \\n' +\r\n  '                      #.................#               \\n' +\r\n  '         ~~~~~~       #.................#               \\n' +\r\n  '      ~~~~~~~          #.................#              \\n' +\r\n  '         ~~~~~~        #.................#              \\n' +\r\n  '                       #.................#              \\n' +\r\n  '                       #.................#              ',\r\n  '' +\r\n  '                      #11111111111111111#               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                      #                 #               \\n' +\r\n  '                       #                 #              \\n' +\r\n  '                       #       @         #              \\n' +\r\n  '                       #                 #              \\n' +\r\n  '                       #22222222222222222#              ',\r\n  new Map([\r\n    [ '1', 'swordTreasure' ],\r\n    [ '2', 'spike' ],\r\n  ]),\r\n  new Map([\r\n    ['#', '#555555'],\r\n    ['~', '#0000FF'],\r\n  ]),\r\n    new Map<string, Map<string, Pos>>(),\r\n  '#050505',\r\n  '',\r\n  new TargetSpawner((state: SpawnerState): void => {\r\n    const m = 34;\r\n    state.tick = (state.tick + 1) % (m - 2);\r\n    let n = state.tick;\r\n\r\n    if (state.tick >= m / 2) {\r\n      n = m - 2 - state.tick;\r\n    }\r\n\r\n    state.targets.push(new Target(new Pos(23 + n, -1), 'v', 1, 1));\r\n    state.targets.push(new Target(new Pos(22 + n, -1), 'v', 1, 1));\r\n  }, (): Pos => {\r\n    return new Pos(0, 1);\r\n  }, (pv: number): string => {\r\n    return '#00FF00';\r\n  }),\r\n  null,\r\n  '',\r\n);\r\n\r\nconst swordTreasure = new LevelMap('' +\r\n  '                                                        \\n' +\r\n  '                                             ~~~~       \\n' +\r\n  '    ~~~~                                       ~~~~     \\n' +\r\n  '      ~~~~~~                                            \\n' +\r\n  '              #############################             \\n' +\r\n  '         #####.............................####         \\n' +\r\n  '       ##......................................##       \\n' +\r\n  '      #..........................................#      \\n' +\r\n  '     #............................................#     \\n' +\r\n  '     #............................................#     \\n' +\r\n  '     #............................................#     \\n' +\r\n  '     #............................................#     \\n' +\r\n  '      #..........................................#      \\n' +\r\n  '       ##......................................##       \\n' +\r\n  '         #####............................#####         \\n' +\r\n  '              ####....................####              \\n' +\r\n  '                  #..................#       ~~         \\n' +\r\n  '      ~~~~~~      #..................#        ~~~       \\n' +\r\n  '   ~~~~~~~        #..................#                  \\n' +\r\n  '      ~~~~~~      #..................#                  \\n' +\r\n  '                  #..................#                  \\n' +\r\n  '                   #.................#                  ',\r\n  '' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '              #############################             \\n' +\r\n  '         #####                             ####         \\n' +\r\n  '       ##                                      ##       \\n' +\r\n  '      #                                          #      \\n' +\r\n  '     #                                            #     \\n' +\r\n  '     #                                            #     \\n' +\r\n  '     #          $                     /           #     \\n' +\r\n  '     #                                            #     \\n' +\r\n  '      #                                          #      \\n' +\r\n  '       ##                                      ##       \\n' +\r\n  '         #####                            #####         \\n' +\r\n  '              ####                    ####              \\n' +\r\n  '                  #                  #                  \\n' +\r\n  '                  #                  #                  \\n' +\r\n  '                  #                  #                  \\n' +\r\n  '                  #                  #                  \\n' +\r\n  '                  #                  #                  \\n' +\r\n  '                   #11111111111111111#                  ',\r\n  new Map([\r\n    [ '1', 'spike2' ],\r\n  ]),\r\n  new Map([\r\n    ['#', '#555555'],\r\n    ['~', '#0000FF'],\r\n  ]),\r\n    new Map<string, Map<string, Pos>>(),\r\n  '#050500',\r\n  '',\r\n  null,\r\n    null,\r\n  '',\r\n);\r\n\r\nconst leaveRock = new LevelMap('' +\r\n  '                       #~~~~.~~~~~~~~~~~#               \\n' +\r\n  '     \"\"\"               #~~~...~~~~~~~~~~#       \"\"\"     \\n' +\r\n  '       \"\"\"            #~........~~~~~~~~~#       \"\"\"\"   \\n' +\r\n  '                    ##~..............~~~~~##            \\n' +\r\n  '                 ###........................###         \\n' +\r\n  '         ########..............................##       \\n' +\r\n  '#########........................................#      \\n' +\r\n  '..................................................#     \\n' +\r\n  '..................................................#     \\n' +\r\n  '..................................................#     \\n' +\r\n  '..................................................#     \\n' +\r\n  '#######...........................................#     \\n' +\r\n  '       #####.....................................#      \\n' +\r\n  '            ###.................................#       \\n' +\r\n  '               ###.............................#        \\n' +\r\n  '                  ####~~~~~~~......~~~~~~~~~###         \\n' +\r\n  '    \"\"                ###~~~~~~~~~~~~~~~~###            \\n' +\r\n  '   \"\"\"\"                  ################               \\n' +\r\n  '    \"\"\"\"\"\"                                         \"\"   \\n' +\r\n  '      \"\"\"\"\"\"\"                                   \"\"\"\"\"\"  \\n' +\r\n  '                                                 \"\"     \\n' +\r\n  '                                                        ',\r\n  '' +\r\n  '                       #2222222222222222#               \\n' +\r\n  '                       #                #               \\n' +\r\n  '                      #                  #              \\n' +\r\n  '                    ##xxxxxxxxxxxxxxxxxxxx##            \\n' +\r\n  '                 ###                        ###         \\n' +\r\n  '         ########                              ##       \\n' +\r\n  '#########                                        #      \\n' +\r\n  '1                                                 #     \\n' +\r\n  '1   @                                             #     \\n' +\r\n  '1                                                 #     \\n' +\r\n  '1                                                 #     \\n' +\r\n  '#######                                           #     \\n' +\r\n  '       #####                                     #      \\n' +\r\n  '            ###                                 #       \\n' +\r\n  '               ###                             #        \\n' +\r\n  '                  ####                      ###         \\n' +\r\n  '                      ###                ###            \\n' +\r\n  '                         ################               \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        ',\r\n  new Map([\r\n    [ '1', 'training' ],\r\n    [ '2', 'swordOnly' ],\r\n  ]),\r\n  new Map([\r\n    [ '~', '#0000FF'],\r\n    [ '\"', '#00FF00'],\r\n  ]),\r\n    new Map<string, Map<string, Pos>>(),\r\n  '#020302',\r\n  '',\r\n  new TargetSpawner((state: SpawnerState): void => {\r\n    if (state.targets.length > 0) {\r\n      state.tick = 9;\r\n      return;\r\n    }\r\n\r\n    state.tick--;\r\n\r\n    if (state.tick <= 0) {\r\n      state.targets.push(new Target(new Pos(31, 13), 'O', 1, 1));\r\n      state.tick = 9;\r\n    }\r\n  }, (): Pos => {\r\n    return new Pos(0, 0);\r\n  }, (pv: number): string => {\r\n    return '#00FF00';\r\n  }),\r\n  (l: Labyrinth, symbol: string): boolean => {\r\n    if (l.currentMapData.spawner != null) {\r\n      return l.currentMapData.spawner.targets.length !== 0 && l.persistedData.coins !== 1090;\r\n    }\r\n\r\n    return false;\r\n  },\r\n  '#FF8800'\r\n);\r\n\r\nconst swordOnly = new LevelMap('' +\r\n  '                       #~~~~.~~~~~~~~~~#                \\n' +\r\n  '          \"\"\"          #~~.....~~~~~~~~~#    \"\"\"        \\n' +\r\n  '        \"\"\"           #~~~........~~~~~~~#    \"\"\"\"      \\n' +\r\n  '                    ##~~..............~~~~##            \\n' +\r\n  '                 ###........................#           \\n' +\r\n  '         ########............................#          \\n' +\r\n  '#########.....................................#         \\n' +\r\n  '...............................................#        \\n' +\r\n  '...............................................#        \\n' +\r\n  '...............................................#        \\n' +\r\n  '...............................................#        \\n' +\r\n  '#######........................................#        \\n' +\r\n  '       #####...................................#        \\n' +\r\n  '            ###...............................#         \\n' +\r\n  '               ###...........................#          \\n' +\r\n  '                  #~~~...........~~~~~~~~~~~#           \\n' +\r\n  '        \"\"         ##~~~.......~~~~~~~~~~~~#            \\n' +\r\n  '       \"\"\"\"          #~~~~.....~~~~~~~~~~~#   \"\"        \\n' +\r\n  '       \"\"\"\"\"\"         #~~~~...~~~~~~~~~~~#     \"\"\"      \\n' +\r\n  '                      #~~~~...~~~~~~~~~~~#    \"\"\"       \\n' +\r\n  '                      #~~~~...~~~~~~~~~~~#     \"\"       \\n' +\r\n  '                       #~~~~.~~~~~~~~~~~#               ',\r\n  '' +\r\n  '                       #111111111111111#                \\n' +\r\n  '                       #                #               \\n' +\r\n  '                      #                  #              \\n' +\r\n  '                    ##                    ##            \\n' +\r\n  '                 ###                        #           \\n' +\r\n  '         ########                            #          \\n' +\r\n  '#########                                     #         \\n' +\r\n  '3                                              #        \\n' +\r\n  '3                                              #        \\n' +\r\n  '3                                              #        \\n' +\r\n  '3                                              #        \\n' +\r\n  '#######                                        #        \\n' +\r\n  '       #####                                   #        \\n' +\r\n  '            ###                               #         \\n' +\r\n  '               ###                           #          \\n' +\r\n  '                  #                         #           \\n' +\r\n  '                   ##                      #            \\n' +\r\n  '                     #                    #             \\n' +\r\n  '                      #     @            #              \\n' +\r\n  '                      #                  #              \\n' +\r\n  '                      #                  #              \\n' +\r\n  '                       #2222222222222222#               ',\r\n  new Map([\r\n    [ '1', 'hitSword' ],\r\n    [ '2', 'leaveRock' ],\r\n    [ '3', 'rotating' ],\r\n  ]),\r\n  new Map([\r\n    [ '~', '#0000FF'],\r\n    [ '\"', '#00FF00'],\r\n  ]),\r\n    new Map<string, Map<string, Pos>>(),\r\n  '#020302',\r\n  '',\r\n  new TargetSpawner((state: SpawnerState): void => {\r\n    state.targets.push(new Target(new Pos(26 + state.tick, -1), 'v', 1, 1));\r\n    state.targets.push(new Target(new Pos(-1, 7 + state.tick), '>', 1, 1));\r\n\r\n    state.tick = (state.tick + 1) % 4;\r\n  }, (symbol: string): Pos => {\r\n    if (symbol === 'v') {\r\n      return new Pos(0, 1);\r\n    } else {\r\n      return new Pos(1, 0);\r\n    }\r\n  }, (pv: number): string => {\r\n    return '#00FFFF';\r\n  }),\r\n  null,\r\n  '',\r\n);\r\n\r\nconst rotating = new LevelMap('' +\r\n  '                   #................#                   \\n' +\r\n  '        \"\"\"       #.................#             \"\"    \\n' +\r\n  '      \"\"\"\"       #...................#           \"\"\"\"   \\n' +\r\n  '                #.....................##           \"\"   \\n' +\r\n  '               #........................##              \\n' +\r\n  '              #...........................###           \\n' +\r\n  '             #...............................###########\\n' +\r\n  '            #...........................................\\n' +\r\n  '            #...........................................\\n' +\r\n  '            #...........................................\\n' +\r\n  '            #...........................................\\n' +\r\n  '            #....................................#######\\n' +\r\n  '             #.................................##       \\n' +\r\n  '              #...............................#         \\n' +\r\n  '               ##............................#          \\n' +\r\n  '                 ##.........................#           \\n' +\r\n  '                   ##~....................~#            \\n' +\r\n  ' \"\"\"\"                #~~~...............~~~#            \\n' +\r\n  '   \"\"\"\"               #~~~~..........~~~~~#             \\n' +\r\n  '                       #~~~~~~~~~~~~~~~~~~#             \\n' +\r\n  '                       #~~~~~~~~~~~~~~~~~#              \\n' +\r\n  '                       #~~~~~~~~~~~~~~~~#               ',\r\n  '' +\r\n  '                   #1111111111111111#                   \\n' +\r\n  '                  #                 #                   \\n' +\r\n  '                 #                   #                  \\n' +\r\n  '                #                     ##                \\n' +\r\n  '               #                        ##              \\n' +\r\n  '              #                           ###           \\n' +\r\n  '             #                               ###########\\n' +\r\n  '            #                                          3\\n' +\r\n  '            #                                     @    3\\n' +\r\n  '            #                                          3\\n' +\r\n  '            #                                          3\\n' +\r\n  '            #                                    #######\\n' +\r\n  '             #                                 ##       \\n' +\r\n  '              #                               #         \\n' +\r\n  '               ##                            #          \\n' +\r\n  '                 ##                         #           \\n' +\r\n  '                   ##                      #            \\n' +\r\n  '                     #                     #            \\n' +\r\n  '                      #                   #             \\n' +\r\n  '                       #                  #             \\n' +\r\n  '                       #                 #              \\n' +\r\n  '                       #                #               ',\r\n  new Map([\r\n    [ '1', 'swordTreasure2' ],\r\n    [ '3', 'swordOnly' ],\r\n  ]),\r\n  new Map([\r\n    [ '~', '#0000FF'],\r\n    [ '\"', '#00FF00'],\r\n  ]),\r\n    new Map<string, Map<string, Pos>>(),\r\n  '#020302',\r\n  '',\r\n  new TargetSpawner((state: SpawnerState): void => {\r\n    if (state.tick !== 2) {\r\n      state.targets.push(new Target(new Pos(56, 7 + state.tick), '<', 1, 1));\r\n      state.targets.push(new Target(new Pos(56, 9 + state.tick), '<', 1, 1));\r\n    }\r\n    state.tick = (state.tick + 1) % 3;\r\n  }, (symbol: string): Pos => {\r\n    return new Pos(-1, 0);\r\n  }, (pv: number): string => {\r\n    return '#00FFFF';\r\n  }),\r\n  null,\r\n  '',\r\n);\r\n\r\nconst swordTreasure2 = new LevelMap('' +\r\n  '                                                        \\n' +\r\n  '                                             ~~~~       \\n' +\r\n  '    ~~~~                                       ~~~~     \\n' +\r\n  '      ~~~~~~                                            \\n' +\r\n  '              #############################             \\n' +\r\n  '         #####.............................####         \\n' +\r\n  '       ##......................................##       \\n' +\r\n  '      #..........................................#      \\n' +\r\n  '     #............................................#     \\n' +\r\n  '     #............................................#     \\n' +\r\n  '     #............................................#     \\n' +\r\n  '     #............................................#     \\n' +\r\n  '      #..........................................#      \\n' +\r\n  '       ##......................................##       \\n' +\r\n  '         #####............................#####         \\n' +\r\n  '              ####....................####              \\n' +\r\n  '                  #..................#       ~~         \\n' +\r\n  '      ~~~~~~      #..................#        ~~~       \\n' +\r\n  '   ~~~~~~~        #..................#                  \\n' +\r\n  '      ~~~~~~      #..................#                  \\n' +\r\n  '                  #..................#                  \\n' +\r\n  '                   #................#                   ',\r\n  '' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '              #############################             \\n' +\r\n  '         #####                             ####         \\n' +\r\n  '       ##                                      ##       \\n' +\r\n  '      #                                          #      \\n' +\r\n  '     #          $                                 #     \\n' +\r\n  '     #        $$$$                                #     \\n' +\r\n  '     #        $  $                    \\\\           #     \\n' +\r\n  '     #         $$                                 #     \\n' +\r\n  '      #                                          #      \\n' +\r\n  '       ##                                      ##       \\n' +\r\n  '         #####                            #####         \\n' +\r\n  '              ####                    ####              \\n' +\r\n  '                  #                  #                  \\n' +\r\n  '                  #                  #                  \\n' +\r\n  '                  #                  #                  \\n' +\r\n  '                  #                  #                  \\n' +\r\n  '                  #                  #                  \\n' +\r\n  '                   #1111111111111111#                   ',\r\n  new Map([\r\n    [ '1', 'rotating' ],\r\n  ]),\r\n  new Map([\r\n    ['#', '#555555'],\r\n    ['~', '#0000FF'],\r\n  ]),\r\n    new Map<string, Map<string, Pos>>(),\r\n  '#050500',\r\n  '',\r\n  null,\r\n    null,\r\n  '',\r\n);\r\n\r\nconst hitSword = new LevelMap('' +\r\n  '                           #~~...~~#                    \\n' +\r\n  '                           #~~...~~#                    \\n' +\r\n  '        ~~~                #~~...~~#                    \\n' +\r\n  '      ~~~~                #~~~....~~#                   \\n' +\r\n  '                         #~~~......~~#        ~~~~      \\n' +\r\n  '                        #~~~........~~#      ~~~~~~~    \\n' +\r\n  '                        #~~..........~#         ~~      \\n' +\r\n  '                        #~...........~#                 \\n' +\r\n  '     ~~~                #~...........~#                 \\n' +\r\n  '      ~~~               #.............#                 \\n' +\r\n  '                        #.............#                 \\n' +\r\n  '                        #.............#                 \\n' +\r\n  '                        #.............#                 \\n' +\r\n  '                        #.............#                 \\n' +\r\n  '                        #.............#                 \\n' +\r\n  '                        #~~~.....~~~~~#                 \\n' +\r\n  '          ~~            #~~~.....~~~~~#   ~~~~          \\n' +\r\n  '        ~~~~~~          #~~~...~~~~~~~#     ~~~~        \\n' +\r\n  '           ~~           #~~~...~~~~~~~#                 \\n' +\r\n  '                        #~~...~~~~~~~~#                 \\n' +\r\n  '                        #~~...~~~~~~~~#                 \\n' +\r\n  '                       #~~~~.~~~~~~~~~~#                ',\r\n  '' +\r\n  '                           #2222222#                    \\n' +\r\n  '                           #       #                    \\n' +\r\n  '                           #       #                    \\n' +\r\n  '                          #         #                   \\n' +\r\n  '                         #           #                  \\n' +\r\n  '                        #             #                 \\n' +\r\n  '                        #             #                 \\n' +\r\n  '                        #             #                 \\n' +\r\n  '                        #             #                 \\n' +\r\n  '                        #             #                 \\n' +\r\n  '                        #             #                 \\n' +\r\n  '                        #             #                 \\n' +\r\n  '                        #             #                 \\n' +\r\n  '                        #             #                 \\n' +\r\n  '                        #             #                 \\n' +\r\n  '                        #             #                 \\n' +\r\n  '                        #             #                 \\n' +\r\n  '                        #             #                 \\n' +\r\n  '                        #             #                 \\n' +\r\n  '                        #   @         #                 \\n' +\r\n  '                        #             #                 \\n' +\r\n  '                       #111111111111111#                ',\r\n  new Map([\r\n    [ '1', 'swordOnly' ],\r\n    [ '2', 'lastChallenge' ],\r\n  ]),\r\n  new Map([\r\n    [ '~', '#0000FF'],\r\n    [ '\"', '#00FF00'],\r\n  ]),\r\n    new Map<string, Map<string, Pos>>(),\r\n  '#020302',\r\n  '',\r\n  new TargetSpawner((state: SpawnerState): void => {\r\n    if (state.tick === 0) {\r\n      state.targets.push(new Target(new Pos(30, -1), 'O', 3, 3));\r\n      state.targets.push(new Target(new Pos(31, -1), 'O', 3, 3));\r\n      state.targets.push(new Target(new Pos(32, -1), 'O', 3, 3));\r\n    }\r\n\r\n    state.tick = (state.tick + 1) % 3;\r\n  }, (symbol: string): Pos => {\r\n    return new Pos(0, 1);\r\n  }, (pv: number): string => {\r\n    if (pv === 3) {\r\n      return '#00FF00';\r\n    } else if (pv === 2) {\r\n      return '#FFAA00';\r\n    } else {\r\n      return '#FF0000';\r\n    }\r\n  }),\r\n  null,\r\n  '',\r\n);\r\n\r\nconst lastChallenge = new LevelMap('' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '##################################                      \\n' +\r\n  '..................................##                    \\n' +\r\n  '....................................##                  \\n' +\r\n  '......................................#                 \\n' +\r\n  '.......................................#                \\n' +\r\n  '########################................#               \\n' +\r\n  '                        #................#              \\n' +\r\n  '      ~~~              #..................#             \\n' +\r\n  '                     ##....................#            \\n' +\r\n  '#####################.......................#           \\n' +\r\n  '............................................#           \\n' +\r\n  '............................................#           \\n' +\r\n  '............................................#           \\n' +\r\n  '####################.......................#            \\n' +\r\n  '                    #######...........~~~~#             \\n' +\r\n  '           ~~~             ##........~~~~#              \\n' +\r\n  '         ~~~~                #.......~~~#               \\n' +\r\n  '                             #.....~~~##                \\n' +\r\n  '                            #.....~~##                  \\n' +\r\n  '                           #~~...~~#                    ',\r\n  '' +\r\n  '                                                        \\n' +\r\n  '                                                        \\n' +\r\n  '##################################                      \\n' +\r\n  '1                                 ##                    \\n' +\r\n  '1                                   ##                  \\n' +\r\n  '1                                     #                 \\n' +\r\n  '1                                      #                \\n' +\r\n  '########################                #               \\n' +\r\n  '                        #                #              \\n' +\r\n  '                       #                  #             \\n' +\r\n  '                     ##                    #            \\n' +\r\n  '#####################                       #           \\n' +\r\n  '1                                           #           \\n' +\r\n  '1                                           #           \\n' +\r\n  '1                                           #           \\n' +\r\n  '####################                       #            \\n' +\r\n  '                    #######               #             \\n' +\r\n  '                           ##            #              \\n' +\r\n  '                             #          #               \\n' +\r\n  '                             #        ##                \\n' +\r\n  '                            #       ##                  \\n' +\r\n  '                           #2222222#                    ',\r\n  new Map([\r\n    [ '2', 'hitSword' ],\r\n    [ '1', 'treasure' ],\r\n  ]),\r\n  new Map([\r\n    [ '~', '#0000FF'],\r\n    [ '\"', '#00FF00'],\r\n  ]),\r\n    new Map<string, Map<string, Pos>>(),\r\n  '#020302',\r\n  '',\r\n  new TargetSpawner((state: SpawnerState): void => {\r\n    if (state.tick % 8 === 0 || state.tick % 8 === 1) {\r\n      state.targets.push(new Target(new Pos(-1, 3), 'O', 1, 1));\r\n      state.targets.push(new Target(new Pos(-1, 4), 'O', 1, 1));\r\n      state.targets.push(new Target(new Pos(-1, 5), 'O', 1, 1));\r\n    } else if (state.tick % 6 === 2 || state.tick === 7) {\r\n      state.targets.push(new Target(new Pos(-1, 3), 'O', 1, 1));\r\n      state.targets.push(new Target(new Pos(-1, 4), 'O', 1, 1));\r\n      state.targets.push(new Target(new Pos(-1, 6), 'O', 1, 1));\r\n    } else if (state.tick % 6 === 3 || state.tick === 6) {\r\n      state.targets.push(new Target(new Pos(-1, 3), 'O', 1, 1));\r\n      state.targets.push(new Target(new Pos(-1, 5), 'O', 1, 1));\r\n      state.targets.push(new Target(new Pos(-1, 6), 'O', 1, 1));\r\n    } else {\r\n      state.targets.push(new Target(new Pos(-1, 4), 'O', 1, 1));\r\n      state.targets.push(new Target(new Pos(-1, 5), 'O', 1, 1));\r\n      state.targets.push(new Target(new Pos(-1, 6), 'O', 1, 1));\r\n    }\r\n\r\n    state.targets.push(new Target(new Pos(-1, 11 + (state.tick % 2)), '>', 1, 1));\r\n    state.targets.push(new Target(new Pos(-1, 13 + (state.tick % 2)), '>', 1, 1));\r\n\r\n    state.tick = (state.tick + 1) % 8;\r\n  }, (symbol: string): Pos => {\r\n    return new Pos(1, 0);\r\n  }, (pv: number): string => {\r\n    return '#00FFFF';\r\n  }),\r\n  null,\r\n  '',\r\n);\r\n\r\nconst treasure = new LevelMap('' +\r\n  '########################################################\\n' +\r\n  '#......................................................#\\n' +\r\n  '#......................................................#\\n' +\r\n  '#.......................................................\\n' +\r\n  '#.......................................................\\n' +\r\n  '#.......................................................\\n' +\r\n  '#.......................................................\\n' +\r\n  '#......................................................#\\n' +\r\n  '#......................................................#\\n' +\r\n  '#......................................................#\\n' +\r\n  '#......................................................#\\n' +\r\n  '#......................................................#\\n' +\r\n  '#.......................................................\\n' +\r\n  '#.......................................................\\n' +\r\n  '#.......................................................\\n' +\r\n  '#......................................................#\\n' +\r\n  '#......................................................#\\n' +\r\n  '#......................................................#\\n' +\r\n  '#......................................................#\\n' +\r\n  '#......................................................#\\n' +\r\n  '#......................................................#\\n' +\r\n  '########################################################',\r\n  '' +\r\n  '########################################################\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$1\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$1\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$1\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$1\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$1\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$1\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$1\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#\\n' +\r\n  '#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#\\n' +\r\n  '########################################################',\r\n  new Map([\r\n    [ '1', 'lastChallenge' ],\r\n  ]),\r\n  new Map([\r\n    ['#', '#555555'],\r\n    ['~', '#0000FF'],\r\n  ]),\r\n    new Map<string, Map<string, Pos>>(),\r\n  '#050500',\r\n  '',\r\n  null,\r\n  null,\r\n  '',\r\n);\r\n\r\nexport const AllMaps: Map<string, LevelMap> = new Map([\r\n  [ 'bateau', bateau ],\r\n  [ 'mission', mission ],\r\n  [ 'outside', outside ],\r\n  [ 'training', training ],\r\n  [ 'spike', spike ],\r\n  [ 'spike2', spike2 ],\r\n  [ 'swordTreasure', swordTreasure ],\r\n  [ 'leaveRock', leaveRock ],\r\n  [ 'swordOnly', swordOnly ],\r\n  [ 'rotating', rotating ],\r\n  [ 'swordTreasure2', swordTreasure2 ],\r\n  [ 'hitSword', hitSword ],\r\n  [ 'lastChallenge', lastChallenge ],\r\n  [ 'treasure', treasure ],\r\n]);\r\n","import {Engine} from '../common/engine';\r\nimport {AllMaps} from './map_content';\r\nimport * as consts from './const';\r\nimport * as translations from './translations';\r\nimport {LevelMap, Pos, ObjPos, ProjPos, TeleportPos} from './map_logic';\r\nimport {item2color} from './const';\r\nimport {SpawnerState} from './target';\r\n\r\nfunction make_first_letter_upper(str: string): string {\r\n  return str.charAt(0).toUpperCase() + str.substr(1);\r\n}\r\n\r\nconst charToCommand = new Map<string, Pos>([\r\n  [ '7', new Pos(consts.charPerLine - 11, 0) ],\r\n  [ '8', new Pos(consts.charPerLine - 8, 0) ],\r\n  [ '9', new Pos(consts.charPerLine - 5, 0) ],\r\n  [ '4', new Pos(consts.charPerLine - 11, 1) ],\r\n  [ '5', new Pos(consts.charPerLine - 8, 1) ],\r\n  [ '6', new Pos(consts.charPerLine - 5, 1) ],\r\n  [ '1', new Pos(consts.charPerLine - 11, 2) ],\r\n  [ '2', new Pos(consts.charPerLine - 8, 2) ],\r\n  [ '3', new Pos(consts.charPerLine - 5, 2) ],\r\n]);\r\n\r\nconst currencyFormatter = new Intl.NumberFormat('fr-CH', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 0,\r\n});\r\n\r\nclass PersistedMapData {\r\n  items: Map<string, Array<ObjPos>> = new Map<string, Array<ObjPos>>();\r\n  projectiles: Array<ProjPos> = new Array<ProjPos>();\r\n  spawner: SpawnerState | null = null;\r\n\r\n  static parse(json: any): PersistedMapData | null {\r\n    if (json === null) {\r\n      return null;\r\n    }\r\n\r\n    const p = new PersistedMapData();\r\n\r\n    p.items = new Map<string, Array<ObjPos>>();\r\n\r\n    for (const item in json.items) {\r\n      if (json.items.hasOwnProperty(item)) {\r\n        const pss: Array<ObjPos> = [];\r\n        const positions = json.items[item];\r\n\r\n        for (const pos of positions) {\r\n          pss.push(new ObjPos(pos.x, pos.y, pos.usage));\r\n        }\r\n\r\n        p.items.set(item, pss);\r\n      }\r\n    }\r\n\r\n    p.projectiles = [];\r\n\r\n    for (const proj of json.projectiles) {\r\n      p.projectiles.push(new ProjPos(proj.x, proj.y, proj.vx, proj.vy, proj.symbol, proj.power));\r\n    }\r\n\r\n    p.spawner = SpawnerState.parse(json.spawner);\r\n    return p;\r\n  }\r\n  print(): {} {\r\n    const p: any = {\r\n      items: {},\r\n      projectiles: [],\r\n      spawner: this.spawner!.print(),\r\n    };\r\n\r\n    for (const [item, positions] of this.items) {\r\n      const pss: any = [];\r\n\r\n      for (const pos of positions) {\r\n        pss.push({\r\n          x: pos.x,\r\n          y: pos.y,\r\n          usage: pos.usage,\r\n        });\r\n      }\r\n\r\n      p.items[item] = pss;\r\n    }\r\n\r\n    for (const proj of this.projectiles) {\r\n      p.projectiles.push({\r\n        x: proj.x,\r\n        y: proj.y,\r\n        vx: proj.vx,\r\n        vy: proj.vy,\r\n        symbol: proj.symbol,\r\n        power: proj.power,\r\n      });\r\n    }\r\n\r\n    return p;\r\n  }\r\n  copy(): PersistedMapData {\r\n    const cpy = new PersistedMapData();\r\n\r\n    cpy.items = new Map<string, Array<ObjPos>>();\r\n\r\n    for (const [item, positions] of this.items) {\r\n      const pss: Array<ObjPos> = [];\r\n\r\n      for (const p of positions) {\r\n        pss.push(p.copy());\r\n      }\r\n\r\n      cpy.items.set(item, pss);\r\n    }\r\n\r\n    cpy.projectiles = [];\r\n\r\n    for (const proj of this.projectiles) {\r\n      cpy.projectiles.push(proj.copy());\r\n    }\r\n\r\n    if (this.spawner != null) {\r\n      cpy.spawner = this.spawner.copy();\r\n    }\r\n    return cpy;\r\n  }\r\n}\r\n\r\nclass PersistedData {\r\n  weapon: string = '';\r\n  rocks: number = 0;\r\n  coins: number = 0;\r\n  heroPosition: Pos = new Pos(0, 0);\r\n  mapData: Map<string, PersistedMapData> = new Map<string, PersistedMapData>();\r\n  currentMapName: string = '';\r\n\r\n  static parse(json: any): PersistedData | null {\r\n    if (json === null) {\r\n      return null;\r\n    }\r\n\r\n    if (json.heroPosition === undefined) {\r\n      return null;\r\n    }\r\n\r\n    const p = new PersistedData();\r\n\r\n    p.weapon = json.weapon;\r\n    p.rocks = json.rocks;\r\n    p.coins = json.coins;\r\n    p.heroPosition = new Pos(json.heroPosition.x, json.heroPosition.y);\r\n    p.mapData = new Map<string, PersistedMapData>();\r\n\r\n    for (const map in json.mapData) {\r\n      if (json.mapData.hasOwnProperty(map)) {\r\n        var data = PersistedMapData.parse(json.mapData[map]);\r\n\r\n        if (data != null) {\r\n          p.mapData.set(map, data);\r\n        }\r\n      }\r\n    }\r\n\r\n    p.currentMapName = json.currentMapName;\r\n    return p;\r\n  }\r\n  print(): {} {\r\n    const p: any = {\r\n      weapon: this.weapon,\r\n      rocks: this.rocks,\r\n      coins: this.coins,\r\n      heroPosition: {\r\n        x: this.heroPosition.x,\r\n        y: this.heroPosition.y\r\n      },\r\n      mapData: {},\r\n      currentMapName: this.currentMapName,\r\n    };\r\n\r\n    for (const [i, data] of this.mapData) {\r\n      p.mapData[i] = data.print();\r\n    }\r\n\r\n    return p;\r\n  }\r\n  copy(): PersistedData {\r\n    const cpy = new PersistedData();\r\n\r\n    cpy.weapon = this.weapon;\r\n    cpy.rocks = this.rocks;\r\n    cpy.coins = this.coins;\r\n    cpy.heroPosition = this.heroPosition.copy();\r\n\r\n    cpy.mapData = new Map<string, PersistedMapData>();\r\n\r\n    for (const [name, data] of this.mapData) {\r\n      cpy.mapData.set(name, data.copy());\r\n    }\r\n\r\n    cpy.currentMapName = this.currentMapName;\r\n    return cpy;\r\n  }\r\n}\r\n\r\nexport class Labyrinth {\r\n  public pressed: Map<string, boolean>;\r\n  private readonly engine: Engine;\r\n  readonly charWidth: number;\r\n  private currentStatus: string;\r\n  private isThrowing: boolean;\r\n  private isMenuOpen: boolean;\r\n  private isMainMenu: boolean;\r\n  private menuPosition: number = 0;\r\n  private mainMenu: Array<any> = new Array<any>();\r\n  private gameMenu: Array<any> = new Array<any>();\r\n\r\n  gameOverMessage: string;\r\n  lastSave: PersistedData | null = null;\r\n  persistedData: PersistedData = new PersistedData();\r\n  initialPersistedData: PersistedData | null = null;\r\n  fps: number;\r\n\r\n  currentMap: LevelMap | null = null;\r\n  currentMapData: PersistedMapData = new PersistedMapData();\r\n\r\n  static load_save(l: Labyrinth, save: PersistedData) {\r\n    l.persistedData = save;\r\n\r\n    l.isMainMenu = false;\r\n    l.isMenuOpen = false;\r\n\r\n    if (l.persistedData != null) {\r\n      l.change_map(l.persistedData.currentMapName, false);\r\n    }\r\n\r\n    l.isMenuOpen = false;\r\n    l.save_to_memory();\r\n  }\r\n  static load_from_storage(l: Labyrinth): void {\r\n    var data = Labyrinth.get_from_storage();\r\n\r\n    if (data != null) {\r\n      Labyrinth.load_save(l, data);\r\n    }\r\n  }\r\n  static save_to_storage(l: Labyrinth): void {\r\n    if (l.persistedData != null) {\r\n      const saveData = JSON.stringify(l.persistedData.print());\r\n      window.localStorage.setItem('save', saveData);\r\n    }\r\n\r\n    l.isMenuOpen = false;\r\n  }\r\n  static clear_storage() {\r\n    window.localStorage.clear();\r\n  }\r\n  static get_from_storage(): PersistedData | null {\r\n    const saveData = window.localStorage.getItem('save');\r\n\r\n    if (saveData == null) {\r\n      return null;\r\n    }\r\n\r\n    const persistedData = PersistedData.parse(JSON.parse(saveData));\r\n\r\n    if (persistedData === null) {\r\n      return null;\r\n    }\r\n\r\n    return persistedData;\r\n  }\r\n  static open_main_menu(l: Labyrinth) {\r\n    l.refresh_menu(true);\r\n    l.isMainMenu = true;\r\n  }\r\n  static clear_and_start_tt(l: Labyrinth): void {\r\n    if (l.initialPersistedData != null) {\r\n      const newSave = l.initialPersistedData.copy();\r\n      Labyrinth.load_save(l, newSave);\r\n    }\r\n  }\r\n  parse_all_maps(): void {\r\n    this.initialPersistedData = new PersistedData();\r\n    this.initialPersistedData.mapData = new Map<string, PersistedMapData>();\r\n\r\n    for (const [key, map] of AllMaps) {\r\n      map.parse(key);\r\n\r\n      const mapData = new PersistedMapData();\r\n      mapData.items = new Map<string, Array<ObjPos>>();\r\n      mapData.projectiles = [];\r\n      mapData.spawner = new SpawnerState([], 0);\r\n\r\n      for (const [item, positions] of map.initialItemPositions) {\r\n        const itemPositions: Array<ObjPos> = [];\r\n\r\n        for (const pos of positions) {\r\n          itemPositions.push(pos.copy());\r\n        }\r\n\r\n        mapData.items.set(item, itemPositions);\r\n      }\r\n\r\n      this.initialPersistedData.mapData.set(key, mapData);\r\n    }\r\n\r\n    // Default values for production\r\n    const initialMap = 'bateau';\r\n    this.initialPersistedData.coins = 0;\r\n    this.initialPersistedData.weapon = '';\r\n    this.initialPersistedData.rocks = 0;\r\n\r\n    // TODO: Remove, here are debugging values\r\n  //  initialMap = 'hit_sword';\r\n//    this.initialPersistedData.weapon = '\\\\';\r\n   // this.initialPersistedData.rocks = 0;\r\n    // TODO: END\r\n\r\n    this.initialPersistedData.currentMapName = initialMap;\r\n    this.initialPersistedData.heroPosition = AllMaps.get(initialMap)!.start;\r\n  }\r\n  draw(): void {\r\n    if (this.isMainMenu) {\r\n      this.engine.clear(consts.DefaultBackgroundColor);\r\n      this.draw_main_menu();\r\n    } else {\r\n      if (this.currentMap != null) {\r\n        this.engine.clear(this.currentMap.backgroundColor);\r\n      }\r\n\r\n      this.draw_all();\r\n    }\r\n  }\r\n  do_update(): void {\r\n    if (this.isMenuOpen || this.isMainMenu) {\r\n      this.update_menu();\r\n    } else {\r\n      this.update_on_map();\r\n    }\r\n  }\r\n  get_string_from(x: number, y: number, length: number): string {\r\n    if (this.currentMap != null) {\r\n      return this.currentMap.map.substr(y * (consts.charPerLine + 1) + x, length);\r\n    }\r\n\r\n    return '';\r\n  }\r\n  to_screen_coord(x: number, y: number, dx = 0, dy = 0): Pos {\r\n    return new Pos(this.charWidth * x + dx, 16 * y + dy);\r\n  }\r\n  update_current_status(heroPos: Pos): void {\r\n    let statusSet = false;\r\n    let currentStatus = this.currentStatus;\r\n    const lang = 'fr';\r\n\r\n    if (this.currentMapData == null) {\r\n      return;\r\n    }\r\n\r\n    for (const [item, positions] of this.currentMapData.items) {\r\n      for (let i = 0 ; i < positions.length; i++) {\r\n        if (positions[i].equals(heroPos)) {\r\n          if (item === '$') {\r\n            this.persistedData.coins++;\r\n            positions.splice(i, 1);\r\n            currentStatus = '> 1 $' + translations.pris.get(lang)!.get('M');\r\n          } else {\r\n            const description = translations.item2description.get(lang)!.get(item)!;\r\n            currentStatus = translations.take.get(lang) + description.text;\r\n\r\n            if (positions[i].usage > 1) {\r\n              currentStatus += ' (x' + positions[i].usage + ')';\r\n            }\r\n          }\r\n\r\n          statusSet = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (statusSet) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!statusSet) {\r\n      this.currentStatus = '';\r\n    } else {\r\n      this.currentStatus = currentStatus;\r\n    }\r\n\r\n    if (this.persistedData.currentMapName === 'treasure') {\r\n      this.currentStatus = '> Merci d\\'avoir joué!';\r\n      return;\r\n    }\r\n  }\r\n  drop_current_slot_item_at(pos: Pos, symbol: string, usage: number) {\r\n    // Drop item on the ground if any\r\n    if (symbol !== '') {\r\n      if (!this.currentMapData.items.has(symbol)) {\r\n        this.currentMapData.items.set(symbol, []);\r\n      }\r\n\r\n      this.currentMapData.items.get(symbol)!.push(new ObjPos(pos.x, pos.y, usage));\r\n    }\r\n  }\r\n  try_pick_or_drop_item(heroPos: Pos): boolean {\r\n    const lang = 'fr';\r\n\r\n    if (this.pressed.get('5')) {\r\n      let itemPicked = false;\r\n      let currentStatus = this.currentStatus;\r\n\r\n      for (const [item, positions] of this.currentMapData.items) {\r\n        const description = translations.item2description.get(lang)!.get(item)!;\r\n\r\n        for (let i = 0 ; i < positions.length; i++) {\r\n          if (positions[i].equals(heroPos)) {\r\n            if (consts.weaponItems.indexOf(item) > -1) {\r\n              if (this.persistedData.weapon !== '') {\r\n                this.drop_current_slot_item_at(positions[i], this.persistedData.weapon, -1);\r\n              }\r\n\r\n              this.persistedData.weapon = item;\r\n            } else if (consts.throwableItems.indexOf(item) > -1) {\r\n              this.persistedData.rocks++;\r\n            }\r\n\r\n            const upper = make_first_letter_upper(description.text);\r\n            currentStatus = '> ' + upper;\r\n\r\n            if (positions[i].usage > 1) {\r\n              currentStatus += ' (x' + positions[i].usage + ')';\r\n            }\r\n\r\n            currentStatus += translations.pris.get(lang)!.get(description.genre)!;\r\n            positions.splice(i, 1);\r\n\r\n            itemPicked = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (itemPicked) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!itemPicked) {\r\n        this.currentStatus = '';\r\n      } else {\r\n        this.currentStatus = currentStatus;\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n  try_enter_or_exit(heroPos: Pos): [boolean, Pos, string] {\r\n    const symbol = this.get_symbol_at(heroPos);\r\n\r\n    if (symbol !== '>' && symbol !== '<') {\r\n      return [false, new Pos(0, 0), ''];\r\n    }\r\n\r\n    return this.do_teleport(symbol, new TeleportPos(heroPos.x, heroPos.y, 0), heroPos, heroPos);\r\n  }\r\n  move_hero(heroPos: Pos, walkablePos: Pos, aimPos: Pos): [Pos, boolean] {\r\n    const ret = this.try_teleport(heroPos, walkablePos);\r\n\r\n    if (ret[0]) {\r\n      this.change_map(ret[2], true);\r\n      heroPos = ret[1];\r\n      this.persistedData.heroPosition = ret[1];\r\n      return [heroPos, true];\r\n    } else {\r\n      const [evt] = this.try_hit_target(heroPos, aimPos);\r\n\r\n      if (evt === '') {\r\n        heroPos = walkablePos;\r\n        this.update_current_status(heroPos);\r\n      } else if (evt === 'hit') {\r\n        // this.currentStatus = translations.hit[lang][symbol];\r\n      }\r\n\r\n      return [heroPos, false];\r\n    }\r\n\r\n  }\r\n  collides_with_obstacle(heroPos: Pos): boolean {\r\n    if (this.currentMap == null) {\r\n      return false;\r\n    }\r\n\r\n    if (this.currentMap.obstacleVisible === undefined) {\r\n      return false;\r\n    }\r\n\r\n    for (const [chr, positions] of this.currentMap.obstacles) {\r\n      if (this.currentMap.obstacleVisible(this, chr)) {\r\n        for (const pos of positions) {\r\n          if (heroPos.equals(pos)) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n  // We get:\r\n  // (1) The walkable future position,\r\n  // (2) The real future direction (for aiming) and\r\n  // (3) the new status, if we hit something\r\n  get_future_position(heroPos: Pos): [Pos, Pos, string] {\r\n    let x = heroPos.x;\r\n    let y = heroPos.y;\r\n\r\n    if (this.pressed.get('1') || this.pressed.get('2') || this.pressed.get('3')) {\r\n      y++;\r\n    }\r\n\r\n    if (this.pressed.get('7') || this.pressed.get('8') || this.pressed.get('9')) {\r\n      y--;\r\n    }\r\n\r\n    if (this.pressed.get('1') || this.pressed.get('4') || this.pressed.get('7')) {\r\n      x--;\r\n    }\r\n\r\n    if (this.pressed.get('3') || this.pressed.get('6') || this.pressed.get('9')) {\r\n      x++;\r\n    }\r\n\r\n    const futurePos: Pos = new Pos(x, y);\r\n    const allowedWalkingSymbols = consts.walkableSymbols;\r\n\r\n    let symbol = this.get_symbol_at(futurePos);\r\n\r\n    if (allowedWalkingSymbols.indexOf(symbol) > -1 || this.currentMap == null) {\r\n      return [futurePos, futurePos, ''];\r\n    }\r\n\r\n    if (heroPos.y !== futurePos.y) {\r\n      symbol = this.currentMap.get_symbol_at(heroPos.x, futurePos.y);\r\n\r\n      if (allowedWalkingSymbols.indexOf(symbol) > -1) {\r\n        return [new Pos(heroPos.x, futurePos.y), futurePos, ''];\r\n      } else {\r\n        if (futurePos.x !== heroPos.x) {\r\n          symbol = this.currentMap.get_symbol_at(futurePos.x, heroPos.y);\r\n        }\r\n\r\n        if (allowedWalkingSymbols.indexOf(symbol) > -1) {\r\n          return [new Pos(futurePos.x, heroPos.y), futurePos, ''];\r\n        } else {\r\n          return [heroPos, futurePos, ''];\r\n        }\r\n      }\r\n    } else {\r\n      symbol = this.currentMap.get_symbol_at(futurePos.x, heroPos.y);\r\n\r\n      if (allowedWalkingSymbols.indexOf(symbol) > -1) {\r\n        return [new Pos(futurePos.x, heroPos.y), futurePos, ''];\r\n      } else {\r\n        return [ heroPos, futurePos, '' ];\r\n      }\r\n    }\r\n  }\r\n  change_map(mapName: string, resetTargets: boolean): void {\r\n    this.currentMap = AllMaps.get(mapName)!;\r\n    this.persistedData.currentMapName = mapName;\r\n    this.currentMapData = this.persistedData.mapData.get(mapName)!;\r\n\r\n    if (resetTargets && this.currentMapData.spawner != null) {\r\n      this.currentMapData.spawner.reset();\r\n    }\r\n  }\r\n  save_to_memory(): void {\r\n    this.lastSave = this.persistedData.copy();\r\n  }\r\n  load_last_save() {\r\n    if (this.lastSave != null) {\r\n      this.persistedData = this.lastSave.copy();\r\n    }\r\n\r\n    this.change_map(this.persistedData.currentMapName, false);\r\n  }\r\n  try_teleport(heroPos: Pos, futurePos: Pos): [boolean, Pos, string] {\r\n    if (this.currentMap != null) {\r\n      for (const [chr, teleportsForChar] of this.currentMap.teleports) {\r\n        if (chr === '<' || chr === '>') { // These are treated separately\r\n          continue;\r\n        }\r\n\r\n        for (const pos of teleportsForChar) {\r\n          if (pos.equals(futurePos)) {\r\n            return this.do_teleport(chr, pos, heroPos, futurePos);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return [\r\n      false,\r\n      new Pos(0, 0),\r\n      '',\r\n    ];\r\n  }\r\n  do_teleport(chr: string, pos: TeleportPos, heroPos: Pos, futurePos: Pos): [boolean, Pos, string] {\r\n    if (this.currentMap == null) {\r\n      return [ false, new Pos(0, 0), ''];\r\n    }\r\n\r\n    const newMapName = this.currentMap.teleportMap.get(chr)!;\r\n    const newMap = AllMaps.get(newMapName)!;\r\n    let teleportsOfOtherMap;\r\n    let id;\r\n\r\n    if (chr === '>') {\r\n      teleportsOfOtherMap = newMap.teleports.get('<')!;\r\n      id = 0;\r\n    } else if (chr === '<') {\r\n      teleportsOfOtherMap = newMap.teleports.get('>')!;\r\n      id = 0;\r\n    } else {\r\n      teleportsOfOtherMap = newMap.teleports.get(chr)!;\r\n      id = pos.id;\r\n    }\r\n\r\n    const tp = teleportsOfOtherMap[id];\r\n\r\n    let newX = tp.x + (futurePos.x - heroPos.x);\r\n    let newY = tp.y + (futurePos.y - heroPos.y);\r\n\r\n    // Fix the case where teleport + mouvement ends up in a wall!\r\n    if (newMap.get_symbol_at(newX, newY) === '#') {\r\n      if (newMap.get_symbol_at(tp.x, newY) === '#') {\r\n        newY = tp.y;\r\n      } else {\r\n        newX = tp.x;\r\n      }\r\n    }\r\n\r\n    return [\r\n      true,\r\n      new Pos(newX, newY),\r\n      newMapName,\r\n    ];\r\n  }\r\n  try_hit_target(heroPos: Pos, aimPos: Pos): [string, string] {\r\n    if (this.currentMap == null || this.currentMapData.spawner == null || this.currentMap.targetSpawner === null) {\r\n      return [ '', '' ];\r\n    }\r\n\r\n    const targets = this.currentMapData.spawner.targets;\r\n\r\n    for (let i = 0; i < targets.length;) {\r\n      const target = targets[i];\r\n\r\n      if (target.pos.equals(aimPos)) {\r\n        const dmg = this.get_weapon_damage();\r\n\r\n        if (target.symbol === 'O' && dmg !== 0) {\r\n          target.pv -= dmg;\r\n\r\n          if (target.pv <= 0) {\r\n            targets.splice(i, 1);\r\n            return [ 'hit', target.symbol ];\r\n          } else {\r\n            return [ 'push', target.symbol ];\r\n          }\r\n        } else {\r\n          return [ 'push', target.symbol ];\r\n        }\r\n      }\r\n\r\n      i++;\r\n    }\r\n\r\n    return [ '', '' ];\r\n  }\r\n  update_targets(heroPos: Pos): Pos {\r\n    if (this.currentMap != null && this.currentMap.targetSpawner != null && this.currentMapData != null && this.currentMapData.spawner != null) {\r\n      return this.currentMap.targetSpawner.update(this, this.currentMapData.spawner, heroPos);\r\n    }\r\n\r\n    return heroPos;\r\n  }\r\n  move_projectiles() {\r\n    if (this.currentMap == null) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < this.currentMapData.projectiles.length;) {\r\n      const proj = this.currentMapData.projectiles[i];\r\n\r\n      const newprojx = proj.x + proj.vx;\r\n      const newprojy = proj.y + proj.vy;\r\n\r\n      // If we go outside of the room, teleport the item to it!\r\n      if (newprojy >= consts.mapLines || newprojy < 0\r\n        || newprojx < 0 || newprojx >= consts.charPerLine)  {\r\n        const [canTeleport, where, mapName] = this.try_teleport(proj, proj);\r\n\r\n        if (canTeleport) {\r\n          const mapData = this.persistedData.mapData.get(mapName)!;\r\n          this.projectile2item(mapData, new Pos(where.x + proj.vx, where.y + proj.vy), i);\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // If we hit a wall or water in the same room\r\n      const symbol = this.currentMap.get_symbol_at(newprojx, newprojy);\r\n\r\n      if (consts.walkableSymbols.indexOf(symbol) === -1) {\r\n        this.projectile2item(this.currentMapData, proj, i);\r\n        continue;\r\n      }\r\n\r\n      proj.x = newprojx;\r\n      proj.y = newprojy;\r\n\r\n      i++;\r\n    }\r\n  }\r\n  move_targets_or_die(heroPos: Pos) {\r\n    heroPos = this.update_targets(heroPos);\r\n    const lang = 'fr';\r\n    const symbol = this.get_symbol_at(heroPos);\r\n\r\n    if (consts.walkableSymbols.indexOf(symbol) === -1) {\r\n      this.gameOverMessage = translations.symbol2gameover.get(lang)!.get(symbol)!;\r\n    } else {\r\n      this.persistedData.heroPosition = heroPos;\r\n    }\r\n\r\n  }\r\n  update_menu() {\r\n    let currentMenu: Array<any>;\r\n\r\n    if (this.isMainMenu) {\r\n      currentMenu = this.mainMenu;\r\n    } else {\r\n      currentMenu = this.gameMenu;\r\n    }\r\n\r\n    if (this.pressed.get('8')) {\r\n      let newP = this.menuPosition;\r\n\r\n      if (newP > 0) {\r\n        do {\r\n          newP--;\r\n        }\r\n        while (newP !== -1 && !currentMenu[newP][2]);\r\n      }\r\n\r\n      if (newP !== -1) {\r\n        this.menuPosition = newP;\r\n      }\r\n    }\r\n\r\n    if (this.pressed.get('2')) {\r\n      let newP = this.menuPosition;\r\n\r\n      if (newP < currentMenu.length) {\r\n        do {\r\n          newP++;\r\n        }\r\n        while (newP !== currentMenu.length && !currentMenu[newP][2]);\r\n      }\r\n\r\n      if (newP !== currentMenu.length) {\r\n        this.menuPosition = newP;\r\n      }\r\n    }\r\n\r\n    if (this.pressed.get('5')) {\r\n      currentMenu[this.menuPosition][1](this);\r\n    }\r\n\r\n    if (!this.isMainMenu && this.pressed.get('Escape')) {\r\n      this.isMenuOpen = false;\r\n    }\r\n  }\r\n  update_on_map() {\r\n    if (this.gameOverMessage !== '') {\r\n      if (this.pressed.get(' ')) {\r\n        this.gameOverMessage = '';\r\n        this.load_last_save();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (this.pressed.get('+')) {\r\n      this.fps++;\r\n    }\r\n\r\n    if (this.pressed.get('-')) {\r\n      this.fps--;\r\n    }\r\n\r\n    if (this.pressed.get('Shift') && this.persistedData.rocks > 0) {\r\n      this.isThrowing = !this.isThrowing;\r\n      return;\r\n    }\r\n\r\n    if (this.pressed.get('Escape')) {\r\n      this.isMenuOpen = true;\r\n      this.menuPosition = 0;\r\n      this.refresh_menu(false); // This is to update the availability of Load()\r\n      return;\r\n    }\r\n\r\n    const futurePos = this.get_future_position(this.persistedData.heroPosition);\r\n    const lang = 'fr';\r\n\r\n    const ret = this.try_enter_or_exit(futurePos[0]);\r\n\r\n    if (ret !== undefined) {\r\n      if (ret[0]) {\r\n        this.change_map(ret[2], true);\r\n        this.persistedData.heroPosition = ret[1];\r\n        this.save_to_memory();\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (this.try_pick_or_drop_item(this.persistedData.heroPosition)) {\r\n      this.move_projectiles();\r\n      this.move_targets_or_die(this.persistedData.heroPosition);\r\n      return;\r\n    }\r\n\r\n    if (this.isThrowing) {\r\n      if (this.persistedData.rocks > 0) {\r\n        const item = translations.item2description.get(lang)!.get('*')!;\r\n\r\n        this.currentStatus = '> ' + make_first_letter_upper(item.text + translations.lance.get(lang)!.get(item.genre)!);\r\n\r\n        // TODO: REFACTOR\r\n        const x = this.persistedData.heroPosition.x;\r\n        const y = this.persistedData.heroPosition.y;\r\n        const vx = futurePos[1].x - x;\r\n        const vy = futurePos[1].y - y;\r\n\r\n        if (vx !== 0 || vy !== 0) {\r\n          this.currentMapData.projectiles.push(new ProjPos(x, y, vx, vy, '*', 1));\r\n          this.persistedData.rocks--;\r\n\r\n          this.isThrowing = false;\r\n          this.move_projectiles();\r\n          this.move_targets_or_die(this.persistedData.heroPosition);\r\n        }\r\n\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (futurePos[2] !== '') {\r\n      this.currentStatus = futurePos[2];\r\n      this.move_projectiles();\r\n      this.move_targets_or_die(this.persistedData.heroPosition);\r\n      return;\r\n    }\r\n\r\n    if (this.collides_with_obstacle(futurePos[0])) {\r\n      return;\r\n    }\r\n\r\n    const [newPos, mapChanged] = this.move_hero(this.persistedData.heroPosition, futurePos[0], futurePos[1]);\r\n    this.persistedData.heroPosition = newPos;\r\n\r\n    if (!mapChanged) {\r\n      this.move_projectiles();\r\n    }\r\n\r\n    this.move_targets_or_die(this.persistedData.heroPosition);\r\n\r\n    if (mapChanged && this.gameOverMessage === '') {\r\n      this.save_to_memory();\r\n    }\r\n  }\r\n  draw_map() {\r\n    if (this.currentMap == null) {\r\n      return;\r\n    }\r\n\r\n    for (let y = 0; y < consts.mapLines; y++) {\r\n      for (let x = 0; x < consts.charPerLine;) {\r\n        let length = 0;\r\n        const val = this.currentMap.get_symbol_at(x, y);\r\n\r\n        if (val === ' ' || val === '\\n' || val === undefined) {\r\n          x++;\r\n          continue;\r\n        }\r\n\r\n        while (true) {\r\n          length++;\r\n\r\n          const chr = this.currentMap.get_symbol_at(x + length, y);\r\n\r\n          if (chr !== val) {\r\n            break;\r\n          }\r\n        }\r\n\r\n        const coord = this.to_screen_coord(x, y + consts.headerSize);\r\n        const str = this.get_string_from(x, y, length);\r\n        let color;\r\n\r\n        if (this.currentMap.tile2color !== undefined) {\r\n          color = this.currentMap.tile2color.get(val);\r\n        }\r\n\r\n        if (color === undefined) {\r\n          color = consts.globalTile2color.get(val);\r\n        }\r\n\r\n        if (color === undefined) {\r\n          color = this.currentMap.textColor;\r\n        }\r\n\r\n        this.engine.rect(coord, str.length * this.charWidth, 16, this.currentMap.backgroundColor);\r\n        this.engine.text(str, coord, color);\r\n        x += length;\r\n      }\r\n    }\r\n\r\n    if (this.currentMap.texts !== undefined) {\r\n      const lang = 'fr';\r\n      const texts = this.currentMap.texts.get(lang)!;\r\n\r\n      if (texts !== undefined) {\r\n        for (const [key, pos] of texts) {\r\n          this.engine.text(key, this.to_screen_coord(pos.x, pos.y), this.currentMap.textColor);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  draw_projectiles() {\r\n    if (this.currentMap != null) {\r\n      for (const proj of this.currentMapData.projectiles) {\r\n        const coord = this.to_screen_coord(proj.x, proj.y + consts.headerSize);\r\n\r\n        this.engine.rect(coord, this.charWidth, 16, this.currentMap.backgroundColor);\r\n        this.engine.text(proj.symbol, coord, consts.projectile2color.get(proj.symbol)!);\r\n      }\r\n    }\r\n  }\r\n  draw_targets() {\r\n    if (this.currentMap != null && this.currentMap.targetSpawner != null && this.currentMapData.spawner != null) {\r\n      for (const target of this.currentMapData.spawner.targets) {\r\n        const coord = this.to_screen_coord(target.pos.x, target.pos.y + consts.headerSize);\r\n\r\n        this.engine.rect(coord, this.charWidth, 16, this.currentMap.backgroundColor);\r\n        this.engine.text(target.symbol, coord, this.currentMap.targetSpawner.pv2color(target.pv));\r\n      }\r\n    }\r\n  }\r\n  draw_obstacles() {\r\n    if (this.currentMap == null) {\r\n      return false;\r\n    }\r\n\r\n    for (const [ chr, positions ] of this.currentMap.obstacles) {\r\n      if (this.currentMap.obstacleVisible(this, chr)) {\r\n        for (const pos of positions) {\r\n          const coord = this.to_screen_coord(pos.x, pos.y + consts.headerSize);\r\n          this.engine.rect(coord, this.charWidth, 16, this.currentMap.backgroundColor);\r\n          this.engine.text(chr, coord, this.currentMap.obstacleColor);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  draw_character(chr: string, coord: Pos, color: string) {\r\n    if (this.currentMap == null) {\r\n      return;\r\n    }\r\n    this.engine.rect(coord, this.charWidth, 16, this.currentMap.backgroundColor);\r\n    this.engine.text(chr, coord, color);\r\n  }\r\n  draw_hero() {\r\n    this.draw_character('@',\r\n      this.to_screen_coord(this.persistedData.heroPosition.x, this.persistedData.heroPosition.y + consts.headerSize),\r\n      consts.pnj2color.get('@')!);\r\n  }\r\n  draw_items() {\r\n    if (this.currentMap == null) {\r\n      return;\r\n    }\r\n    for (const [item, positions] of this.currentMapData.items) {\r\n      for (const pos of positions) {\r\n        const coord = this.to_screen_coord(pos.x, pos.y + consts.headerSize);\r\n        const color = consts.item2color.get(item)!;\r\n\r\n        this.engine.rect(coord, this.charWidth, 16, this.currentMap.backgroundColor);\r\n        this.engine.text(item, coord, color);\r\n      }\r\n    }\r\n  }\r\n  get_weapon_damage() {\r\n    return consts.weapon2damage.get(this.persistedData.weapon)!;\r\n  }\r\n  get_symbol_at(pos: Pos): string {\r\n    if (this.currentMap == null) {\r\n      return '';\r\n    }\r\n    return this.currentMap.get_symbol_at(pos.x, pos.y);\r\n  }\r\n  hits_projectile(pos: Pos): [number, number] {\r\n    for (let i = 0; i < this.currentMapData.projectiles.length; i++) {\r\n      const proj = this.currentMapData.projectiles[i];\r\n\r\n      if (proj.equals(pos)) {\r\n        return [i, proj.power];\r\n      }\r\n    }\r\n\r\n    return [-1, 0];\r\n  }\r\n  projectile2item(mapData: PersistedMapData, where: Pos, projectilePosition: number) {\r\n    const proj = this.currentMapData.projectiles[projectilePosition];\r\n\r\n    if (!mapData.items.has(proj.symbol)) {\r\n      mapData.items.set(proj.symbol, []);\r\n    }\r\n\r\n    const items = mapData.items.get(proj.symbol)!;\r\n    let foundItem = false;\r\n\r\n    for (const item of items) {\r\n      if (item.equals(proj)) {\r\n        item.usage++;\r\n        foundItem = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!foundItem) {\r\n      items.push(new ObjPos(where.x, where.y, 1));\r\n    }\r\n\r\n    this.currentMapData.projectiles.splice(projectilePosition, 1);\r\n  }\r\n  draw_overlay() {\r\n    const lang = 'fr';\r\n\r\n    this.engine.text(this.currentStatus, this.to_screen_coord(2, 1), consts.White);\r\n\r\n    const money = currencyFormatter.format(this.persistedData.coins) + ' $';\r\n    this.engine.text(money, this.to_screen_coord(consts.charPerLine - money.length - 7, 1), item2color.get('$')!);\r\n    this.engine.text('[esc]', this.to_screen_coord(consts.charPerLine - 6, 1), consts.OverlayNormal);\r\n\r\n    const h = consts.mapLines + consts.headerSize + 1;\r\n\r\n    for (const [chr, pos] of charToCommand) {\r\n      if (this.isThrowing) {\r\n        this.engine.text(chr, this.to_screen_coord(pos.x, pos.y + h), consts.OverlaySelected);\r\n      } else if (this.pressed.get(chr)) {\r\n        this.engine.text(chr, this.to_screen_coord(pos.x, pos.y + h), consts.OverlayHighlight);\r\n      } else {\r\n        this.engine.text(chr, this.to_screen_coord(pos.x, pos.y + h), consts.OverlayNormal);\r\n      }\r\n    }\r\n\r\n    if (this.persistedData.weapon !== '') {\r\n      this.engine.text('- ' +\r\n        make_first_letter_upper(translations.item2description.get(lang)!.get(this.persistedData.weapon)!.text),\r\n        this.to_screen_coord(3, h), consts.OverlayHighlight);\r\n    }\r\n\r\n    if (this.persistedData.rocks !== 0) {\r\n      this.engine.text('- ' +\r\n        make_first_letter_upper(translations.item2description.get(lang)!.get('*')!.text) + ' (x' + this.persistedData.rocks + ')',\r\n        this.to_screen_coord(3, h + 1), consts.OverlayHighlight);\r\n    }\r\n\r\n    if (this.persistedData.rocks > 0) {\r\n      const txt = '⇧ ' + translations.lancer.get(lang)!;\r\n\r\n      if (this.isThrowing) {\r\n        this.engine.text(txt, this.to_screen_coord(29, h + 1, -2), consts.OverlaySelected);\r\n      } else {\r\n        this.engine.text(txt, this.to_screen_coord(29, h + 1, -2), consts.OverlayHighlight);\r\n      }\r\n    }\r\n  }\r\n  draw_message(): void {\r\n    if (this.gameOverMessage !== '' && this.currentMap != null) {\r\n      const lang = 'fr';\r\n      const retry = translations.retry.get(lang)!;\r\n\r\n      this.engine.rect(this.to_screen_coord(consts.charPerLine / 2 - 15, 10),\r\n        30 * this.charWidth, 16 * 7, this.currentMap.backgroundColor);\r\n      this.engine.text(' **************************** ',\r\n        this.to_screen_coord(consts.charPerLine / 2 - 15, 10), consts.OverlayHighlight);\r\n\r\n      for (let i = 11; i < 16; i++) {\r\n        this.engine.text('*                            *',\r\n           this.to_screen_coord(consts.charPerLine / 2 - 15, i), consts.OverlayHighlight);\r\n      }\r\n\r\n      this.engine.text(' **************************** ',\r\n        this.to_screen_coord(consts.charPerLine / 2 - 15, 16), consts.OverlayHighlight);\r\n\r\n      this.engine.text(this.gameOverMessage,\r\n        this.to_screen_coord(consts.charPerLine / 2 - this.gameOverMessage.length / 2, 12), consts.OverlayHighlight);\r\n      this.engine.text(retry, this.to_screen_coord(consts.charPerLine / 2 - retry.length / 2, 14), consts.OverlayHighlight);\r\n    }\r\n  }\r\n  draw_main_menu(): void {\r\n    let i = 0;\r\n\r\n    for (const [text, , enabled] of this.mainMenu) {\r\n      let txt: string;\r\n      let x = consts.charPerLine / 2 - 18;\r\n      let color: string;\r\n\r\n      if (this.menuPosition === i) {\r\n        txt = '> ' + text;\r\n      } else {\r\n        txt = text;\r\n        x += 2;\r\n      }\r\n\r\n      if (enabled) {\r\n        color = consts.OverlayHighlight;\r\n      } else {\r\n        color = consts.OverlayNormal;\r\n      }\r\n\r\n      this.engine.text(txt, this.to_screen_coord(x, 12 + i), color);\r\n      i++;\r\n    }\r\n  }\r\n  draw_menu(): void {\r\n    if (this.isMenuOpen && this.currentMap != null) {\r\n      let i;\r\n\r\n      this.engine.rect(this.to_screen_coord(consts.charPerLine / 2 - 15, 10),\r\n        30 * this.charWidth, 16 * 7, this.currentMap.backgroundColor);\r\n      this.engine.text(' **************************** ',\r\n        this.to_screen_coord(consts.charPerLine / 2 - 15, 10), consts.OverlayHighlight);\r\n\r\n      for (i = 11; i < 16; i++) {\r\n        this.engine.text('*                            *',\r\n          this.to_screen_coord(consts.charPerLine / 2 - 15, i), consts.OverlayHighlight);\r\n      }\r\n\r\n      this.engine.text(' **************************** ',\r\n        this.to_screen_coord(consts.charPerLine / 2 - 15, 16), consts.OverlayHighlight);\r\n\r\n      i = 0;\r\n\r\n      for (const [text, , enabled] of this.gameMenu) {\r\n        let txt: string;\r\n        let x = consts.charPerLine / 2 - 5;\r\n        let color: string;\r\n\r\n        if (this.menuPosition === i) {\r\n          txt = '> ' + text;\r\n        } else {\r\n          txt = text;\r\n          x += 2;\r\n        }\r\n\r\n        if (enabled) {\r\n          color = consts.OverlayHighlight;\r\n        } else {\r\n          color = consts.OverlayNormal;\r\n        }\r\n\r\n        this.engine.text(txt, this.to_screen_coord(x, 12 + i), color);\r\n        i++;\r\n      }\r\n    }\r\n  }\r\n  draw_all(): void {\r\n    this.draw_map();\r\n    this.draw_items();\r\n    this.draw_hero();\r\n    this.draw_projectiles();\r\n    this.draw_targets();\r\n    this.draw_obstacles();\r\n    this.draw_overlay();\r\n    this.draw_message();\r\n    this.draw_menu();\r\n  }\r\n  resize(width: number, height: number): void {\r\n    this.engine.resize(width, height);\r\n    this.draw();\r\n  }\r\n  refresh_menu(resetPosition: boolean): void {\r\n    let save = Labyrinth.get_from_storage();\r\n    const lang = 'fr';\r\n\r\n    this.mainMenu = [\r\n      [ translations.new_game_tt.get(lang), (l: Labyrinth) => Labyrinth.clear_and_start_tt(l), true ],\r\n      [ translations.load.get(lang), (l: Labyrinth) => Labyrinth.load_save(l, save != null ? save : new PersistedData()), save != null ],\r\n    ];\r\n\r\n    this.gameMenu = [\r\n      [ translations.save.get(lang), (l: Labyrinth) => Labyrinth.save_to_storage(l), true ],\r\n      [ translations.load.get(lang), (l: Labyrinth) => Labyrinth.load_from_storage(l), save != null ],\r\n      [ translations.exit.get(lang), (l: Labyrinth) => Labyrinth.open_main_menu(l), true],\r\n    ];\r\n\r\n    if (resetPosition) {\r\n      if (this.mainMenu[1][2]) {\r\n        this.menuPosition = 1;\r\n      } else {\r\n        this.menuPosition = 0;\r\n      }\r\n    }\r\n  }\r\n  constructor() {\r\n    this.engine = new Engine(\r\n      'canvas',\r\n      460,\r\n      480,\r\n      16,\r\n      'Inconsolata, monospace',\r\n      false,\r\n      0);\r\n\r\n    this.pressed = new Map([\r\n      [ '1', false ],\r\n      [ '2', false ],\r\n      [ '3', false ],\r\n      [ '4', false ],\r\n      [ '5', false ],\r\n      [ '6', false ],\r\n      [ '7', false ],\r\n      [ '8', false ],\r\n      [ '9', false ],\r\n      [ ' ', false ],\r\n      [ 'Shift', false ],\r\n      [ 'Escape', false ],\r\n      [ '+', false],\r\n      [ '-', false],\r\n    ]);\r\n\r\n    this.currentStatus = '';\r\n    this.charWidth = this.engine.get_char_width();\r\n    this.isThrowing = false;\r\n    this.gameOverMessage = '';\r\n    this.isMenuOpen = false;\r\n    this.isMainMenu = true;\r\n    this.fps = 6;\r\n\r\n    this.parse_all_maps();\r\n    this.refresh_menu(true);\r\n  }\r\n}\r\n","// @ts-ignore\r\nimport * as React from 'react';\r\n// @ts-ignore\r\nimport * as FontFaceObserver from 'fontfaceobserver';\r\n\r\nimport { Labyrinth } from './labyrinth';\r\n\r\nimport './Rogue.css';\r\n\r\ninterface RogueProps {\r\n}\r\n\r\nclass Rogue extends React.Component<RogueProps> {\r\n    private labyrinth: Labyrinth | null = null;\r\n\r\n    componentDidMount() {\r\n        const labyrinth = new Labyrinth();\r\n        this.labyrinth = labyrinth;\r\n        this.labyrinth.resize(window.innerWidth, window.innerHeight);\r\n\r\n        window.addEventListener('resize', this.onResize);\r\n        window.addEventListener('keydown', this.onKeydown);\r\n\r\n        const font = new FontFaceObserver('Inconsolata');\r\n\r\n        font.load().then(() => {\r\n            labyrinth.draw();\r\n        });\r\n    }\r\n\r\n    constructor(props: Readonly<RogueProps>) {\r\n        super(props);\r\n        document.body.style.overflow = 'hidden';\r\n    }\r\n\r\n    doUpdate = () => {\r\n        if (this.labyrinth == null) {\r\n            return;\r\n        }\r\n\r\n        this.labyrinth.do_update();\r\n        this.labyrinth.draw();\r\n\r\n        for (const [key] of this.labyrinth.pressed) {\r\n            this.labyrinth.pressed.set(key, false);\r\n        }\r\n    }\r\n\r\n    onResize = () => {\r\n        if (this.labyrinth == null) {\r\n            return;\r\n        }\r\n\r\n        this.labyrinth.resize(window.innerWidth, window.innerHeight);\r\n    }\r\n\r\n    onKeydown = (event: KeyboardEvent) => {\r\n        if (this.labyrinth == null) {\r\n            return;\r\n        }\r\n\r\n        let update = false;\r\n\r\n        if (this.labyrinth.pressed.has(event.key)) {\r\n            this.labyrinth.pressed.set(event.key, true);\r\n            update = true;\r\n        } else {\r\n            if (event.key === 'ArrowLeft') {\r\n                this.labyrinth.pressed.set('4', true);\r\n                update = true;\r\n            } else if (event.key === 'ArrowRight') {\r\n                this.labyrinth.pressed.set('6', true);\r\n                update = true;\r\n            } else if (event.key === 'ArrowUp') {\r\n                this.labyrinth.pressed.set('8', true);\r\n                update = true;\r\n            } else if (event.key === 'ArrowDown') {\r\n                this.labyrinth.pressed.set('2', true);\r\n                update = true;\r\n            } else if (event.key === 'Enter') {\r\n                this.labyrinth.pressed.set('5', true);\r\n                update = true;\r\n            }\r\n        }\r\n\r\n        if (update) {\r\n            this.doUpdate();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id='canvasContainer'>\r\n                <canvas id='canvas'>\r\n                    Your browser doesn't seem to support HTML5. Please upgrade your browser.\r\n                </canvas>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Rogue;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Rogue from \"./rogue/Rogue\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n      <Rogue />\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}